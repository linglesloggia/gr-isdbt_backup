# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _isdbt_swig
else:
    import _isdbt_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _isdbt_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _isdbt_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _isdbt_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _isdbt_swig.high_res_timer_epoch()
class energy_dispersal(object):
    r"""Proxy of C++ gr::isdbt::energy_dispersal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", constellation_size: "int", rate: "int", nsegments: "int") -> "gr::isdbt::energy_dispersal::sptr":
        r"""make(int mode, int constellation_size, int rate, int nsegments) -> energy_dispersal_sptr"""
        return _isdbt_swig.energy_dispersal_make(mode, constellation_size, rate, nsegments)
    __swig_destroy__ = _isdbt_swig.delete_energy_dispersal

# Register energy_dispersal in _isdbt_swig:
_isdbt_swig.energy_dispersal_swigregister(energy_dispersal)

def energy_dispersal_make(mode: "int", constellation_size: "int", rate: "int", nsegments: "int") -> "gr::isdbt::energy_dispersal::sptr":
    r"""energy_dispersal_make(int mode, int constellation_size, int rate, int nsegments) -> energy_dispersal_sptr"""
    return _isdbt_swig.energy_dispersal_make(mode, constellation_size, rate, nsegments)

class energy_dispersal_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::energy_dispersal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(energy_dispersal_sptr self) -> energy_dispersal_sptr
        __init__(energy_dispersal_sptr self, energy_dispersal p) -> energy_dispersal_sptr
        """
        _isdbt_swig.energy_dispersal_sptr_swiginit(self, _isdbt_swig.new_energy_dispersal_sptr(*args))

    def __deref__(self) -> "gr::isdbt::energy_dispersal *":
        r"""__deref__(energy_dispersal_sptr self) -> energy_dispersal"""
        return _isdbt_swig.energy_dispersal_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_energy_dispersal_sptr

    def make(self, mode: "int", constellation_size: "int", rate: "int", nsegments: "int") -> "gr::isdbt::energy_dispersal::sptr":
        r"""make(energy_dispersal_sptr self, int mode, int constellation_size, int rate, int nsegments) -> energy_dispersal_sptr"""
        return _isdbt_swig.energy_dispersal_sptr_make(self, mode, constellation_size, rate, nsegments)

    def history(self) -> "unsigned int":
        r"""history(energy_dispersal_sptr self) -> unsigned int"""
        return _isdbt_swig.energy_dispersal_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(energy_dispersal_sptr self, int which, int delay)
        declare_sample_delay(energy_dispersal_sptr self, unsigned int delay)
        """
        return _isdbt_swig.energy_dispersal_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(energy_dispersal_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.energy_dispersal_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(energy_dispersal_sptr self, int multiple)"""
        return _isdbt_swig.energy_dispersal_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(energy_dispersal_sptr self) -> int"""
        return _isdbt_swig.energy_dispersal_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(energy_dispersal_sptr self) -> double"""
        return _isdbt_swig.energy_dispersal_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(energy_dispersal_sptr self) -> uint64_t"""
        return _isdbt_swig.energy_dispersal_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(energy_dispersal_sptr self) -> uint64_t"""
        return _isdbt_swig.energy_dispersal_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(energy_dispersal_sptr self) -> bool"""
        return _isdbt_swig.energy_dispersal_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(energy_dispersal_sptr self) -> bool"""
        return _isdbt_swig.energy_dispersal_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(energy_dispersal_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.energy_dispersal_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(energy_dispersal_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.energy_dispersal_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(energy_dispersal_sptr self, std::string level)"""
        return _isdbt_swig.energy_dispersal_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(energy_dispersal_sptr self) -> std::string"""
        return _isdbt_swig.energy_dispersal_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(energy_dispersal_sptr self) -> int"""
        return _isdbt_swig.energy_dispersal_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(energy_dispersal_sptr self, int m)"""
        return _isdbt_swig.energy_dispersal_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(energy_dispersal_sptr self)"""
        return _isdbt_swig.energy_dispersal_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(energy_dispersal_sptr self) -> bool"""
        return _isdbt_swig.energy_dispersal_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(energy_dispersal_sptr self, int m)"""
        return _isdbt_swig.energy_dispersal_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(energy_dispersal_sptr self) -> int"""
        return _isdbt_swig.energy_dispersal_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(energy_dispersal_sptr self, int i) -> long"""
        return _isdbt_swig.energy_dispersal_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(energy_dispersal_sptr self, long max_output_buffer)
        set_max_output_buffer(energy_dispersal_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.energy_dispersal_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(energy_dispersal_sptr self, int i) -> long"""
        return _isdbt_swig.energy_dispersal_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(energy_dispersal_sptr self, long min_output_buffer)
        set_min_output_buffer(energy_dispersal_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.energy_dispersal_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(energy_dispersal_sptr self, int which) -> float
        pc_input_buffers_full(energy_dispersal_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_dispersal_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(energy_dispersal_sptr self, int which) -> float
        pc_input_buffers_full_avg(energy_dispersal_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_dispersal_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(energy_dispersal_sptr self, int which) -> float
        pc_input_buffers_full_var(energy_dispersal_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_dispersal_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(energy_dispersal_sptr self, int which) -> float
        pc_output_buffers_full(energy_dispersal_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_dispersal_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(energy_dispersal_sptr self, int which) -> float
        pc_output_buffers_full_avg(energy_dispersal_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_dispersal_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(energy_dispersal_sptr self, int which) -> float
        pc_output_buffers_full_var(energy_dispersal_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_dispersal_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(energy_dispersal_sptr self) -> float"""
        return _isdbt_swig.energy_dispersal_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(energy_dispersal_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.energy_dispersal_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(energy_dispersal_sptr self)"""
        return _isdbt_swig.energy_dispersal_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(energy_dispersal_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.energy_dispersal_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(energy_dispersal_sptr self) -> int"""
        return _isdbt_swig.energy_dispersal_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(energy_dispersal_sptr self) -> int"""
        return _isdbt_swig.energy_dispersal_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(energy_dispersal_sptr self, int priority) -> int"""
        return _isdbt_swig.energy_dispersal_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(energy_dispersal_sptr self) -> std::string"""
        return _isdbt_swig.energy_dispersal_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(energy_dispersal_sptr self) -> std::string"""
        return _isdbt_swig.energy_dispersal_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(energy_dispersal_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.energy_dispersal_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(energy_dispersal_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.energy_dispersal_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(energy_dispersal_sptr self) -> long"""
        return _isdbt_swig.energy_dispersal_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(energy_dispersal_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.energy_dispersal_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(energy_dispersal_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.energy_dispersal_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(energy_dispersal_sptr self) -> std::string"""
        return _isdbt_swig.energy_dispersal_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(energy_dispersal_sptr self, std::string name)"""
        return _isdbt_swig.energy_dispersal_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(energy_dispersal_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.energy_dispersal_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(energy_dispersal_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.energy_dispersal_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(energy_dispersal_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.energy_dispersal_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(energy_dispersal_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.energy_dispersal_sptr_message_subscribers(self, which_port)

# Register energy_dispersal_sptr in _isdbt_swig:
_isdbt_swig.energy_dispersal_sptr_swigregister(energy_dispersal_sptr)


energy_dispersal_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
energy_dispersal = energy_dispersal.make;

class byte_interleaver(object):
    r"""Proxy of C++ gr::isdbt::byte_interleaver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", constellation_size: "int", rate: "int", nsegments: "int") -> "gr::isdbt::byte_interleaver::sptr":
        r"""make(int mode, int constellation_size, int rate, int nsegments) -> byte_interleaver_sptr"""
        return _isdbt_swig.byte_interleaver_make(mode, constellation_size, rate, nsegments)
    __swig_destroy__ = _isdbt_swig.delete_byte_interleaver

# Register byte_interleaver in _isdbt_swig:
_isdbt_swig.byte_interleaver_swigregister(byte_interleaver)

def byte_interleaver_make(mode: "int", constellation_size: "int", rate: "int", nsegments: "int") -> "gr::isdbt::byte_interleaver::sptr":
    r"""byte_interleaver_make(int mode, int constellation_size, int rate, int nsegments) -> byte_interleaver_sptr"""
    return _isdbt_swig.byte_interleaver_make(mode, constellation_size, rate, nsegments)

class byte_interleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::byte_interleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(byte_interleaver_sptr self) -> byte_interleaver_sptr
        __init__(byte_interleaver_sptr self, byte_interleaver p) -> byte_interleaver_sptr
        """
        _isdbt_swig.byte_interleaver_sptr_swiginit(self, _isdbt_swig.new_byte_interleaver_sptr(*args))

    def __deref__(self) -> "gr::isdbt::byte_interleaver *":
        r"""__deref__(byte_interleaver_sptr self) -> byte_interleaver"""
        return _isdbt_swig.byte_interleaver_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_byte_interleaver_sptr

    def make(self, mode: "int", constellation_size: "int", rate: "int", nsegments: "int") -> "gr::isdbt::byte_interleaver::sptr":
        r"""make(byte_interleaver_sptr self, int mode, int constellation_size, int rate, int nsegments) -> byte_interleaver_sptr"""
        return _isdbt_swig.byte_interleaver_sptr_make(self, mode, constellation_size, rate, nsegments)

    def history(self) -> "unsigned int":
        r"""history(byte_interleaver_sptr self) -> unsigned int"""
        return _isdbt_swig.byte_interleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(byte_interleaver_sptr self, int which, int delay)
        declare_sample_delay(byte_interleaver_sptr self, unsigned int delay)
        """
        return _isdbt_swig.byte_interleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(byte_interleaver_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.byte_interleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(byte_interleaver_sptr self, int multiple)"""
        return _isdbt_swig.byte_interleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(byte_interleaver_sptr self) -> int"""
        return _isdbt_swig.byte_interleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(byte_interleaver_sptr self) -> double"""
        return _isdbt_swig.byte_interleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(byte_interleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.byte_interleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(byte_interleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.byte_interleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(byte_interleaver_sptr self) -> bool"""
        return _isdbt_swig.byte_interleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(byte_interleaver_sptr self) -> bool"""
        return _isdbt_swig.byte_interleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(byte_interleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.byte_interleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(byte_interleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.byte_interleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(byte_interleaver_sptr self, std::string level)"""
        return _isdbt_swig.byte_interleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(byte_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.byte_interleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(byte_interleaver_sptr self) -> int"""
        return _isdbt_swig.byte_interleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(byte_interleaver_sptr self, int m)"""
        return _isdbt_swig.byte_interleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(byte_interleaver_sptr self)"""
        return _isdbt_swig.byte_interleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(byte_interleaver_sptr self) -> bool"""
        return _isdbt_swig.byte_interleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(byte_interleaver_sptr self, int m)"""
        return _isdbt_swig.byte_interleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(byte_interleaver_sptr self) -> int"""
        return _isdbt_swig.byte_interleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(byte_interleaver_sptr self, int i) -> long"""
        return _isdbt_swig.byte_interleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(byte_interleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(byte_interleaver_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.byte_interleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(byte_interleaver_sptr self, int i) -> long"""
        return _isdbt_swig.byte_interleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(byte_interleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(byte_interleaver_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.byte_interleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(byte_interleaver_sptr self, int which) -> float
        pc_input_buffers_full(byte_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_interleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(byte_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(byte_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_interleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(byte_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(byte_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_interleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(byte_interleaver_sptr self, int which) -> float
        pc_output_buffers_full(byte_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_interleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(byte_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(byte_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_interleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(byte_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(byte_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_interleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(byte_interleaver_sptr self) -> float"""
        return _isdbt_swig.byte_interleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(byte_interleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.byte_interleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(byte_interleaver_sptr self)"""
        return _isdbt_swig.byte_interleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(byte_interleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.byte_interleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(byte_interleaver_sptr self) -> int"""
        return _isdbt_swig.byte_interleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(byte_interleaver_sptr self) -> int"""
        return _isdbt_swig.byte_interleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(byte_interleaver_sptr self, int priority) -> int"""
        return _isdbt_swig.byte_interleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(byte_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.byte_interleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(byte_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.byte_interleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(byte_interleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.byte_interleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(byte_interleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.byte_interleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(byte_interleaver_sptr self) -> long"""
        return _isdbt_swig.byte_interleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(byte_interleaver_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.byte_interleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(byte_interleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.byte_interleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(byte_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.byte_interleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(byte_interleaver_sptr self, std::string name)"""
        return _isdbt_swig.byte_interleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(byte_interleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.byte_interleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(byte_interleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.byte_interleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(byte_interleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.byte_interleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(byte_interleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.byte_interleaver_sptr_message_subscribers(self, which_port)

# Register byte_interleaver_sptr in _isdbt_swig:
_isdbt_swig.byte_interleaver_sptr_swigregister(byte_interleaver_sptr)


byte_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
byte_interleaver = byte_interleaver.make;

class carrier_modulation(object):
    r"""Proxy of C++ gr::isdbt::carrier_modulation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", segments: "int", constellation_size: "int") -> "gr::isdbt::carrier_modulation::sptr":
        r"""make(int mode, int segments, int constellation_size) -> carrier_modulation_sptr"""
        return _isdbt_swig.carrier_modulation_make(mode, segments, constellation_size)
    __swig_destroy__ = _isdbt_swig.delete_carrier_modulation

# Register carrier_modulation in _isdbt_swig:
_isdbt_swig.carrier_modulation_swigregister(carrier_modulation)

def carrier_modulation_make(mode: "int", segments: "int", constellation_size: "int") -> "gr::isdbt::carrier_modulation::sptr":
    r"""carrier_modulation_make(int mode, int segments, int constellation_size) -> carrier_modulation_sptr"""
    return _isdbt_swig.carrier_modulation_make(mode, segments, constellation_size)

class carrier_modulation_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::carrier_modulation > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(carrier_modulation_sptr self) -> carrier_modulation_sptr
        __init__(carrier_modulation_sptr self, carrier_modulation p) -> carrier_modulation_sptr
        """
        _isdbt_swig.carrier_modulation_sptr_swiginit(self, _isdbt_swig.new_carrier_modulation_sptr(*args))

    def __deref__(self) -> "gr::isdbt::carrier_modulation *":
        r"""__deref__(carrier_modulation_sptr self) -> carrier_modulation"""
        return _isdbt_swig.carrier_modulation_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_carrier_modulation_sptr

    def make(self, mode: "int", segments: "int", constellation_size: "int") -> "gr::isdbt::carrier_modulation::sptr":
        r"""make(carrier_modulation_sptr self, int mode, int segments, int constellation_size) -> carrier_modulation_sptr"""
        return _isdbt_swig.carrier_modulation_sptr_make(self, mode, segments, constellation_size)

    def history(self) -> "unsigned int":
        r"""history(carrier_modulation_sptr self) -> unsigned int"""
        return _isdbt_swig.carrier_modulation_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(carrier_modulation_sptr self, int which, int delay)
        declare_sample_delay(carrier_modulation_sptr self, unsigned int delay)
        """
        return _isdbt_swig.carrier_modulation_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(carrier_modulation_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.carrier_modulation_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(carrier_modulation_sptr self, int multiple)"""
        return _isdbt_swig.carrier_modulation_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(carrier_modulation_sptr self) -> int"""
        return _isdbt_swig.carrier_modulation_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(carrier_modulation_sptr self) -> double"""
        return _isdbt_swig.carrier_modulation_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(carrier_modulation_sptr self) -> uint64_t"""
        return _isdbt_swig.carrier_modulation_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(carrier_modulation_sptr self) -> uint64_t"""
        return _isdbt_swig.carrier_modulation_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(carrier_modulation_sptr self) -> bool"""
        return _isdbt_swig.carrier_modulation_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(carrier_modulation_sptr self) -> bool"""
        return _isdbt_swig.carrier_modulation_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(carrier_modulation_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.carrier_modulation_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(carrier_modulation_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.carrier_modulation_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(carrier_modulation_sptr self, std::string level)"""
        return _isdbt_swig.carrier_modulation_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(carrier_modulation_sptr self) -> std::string"""
        return _isdbt_swig.carrier_modulation_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(carrier_modulation_sptr self) -> int"""
        return _isdbt_swig.carrier_modulation_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(carrier_modulation_sptr self, int m)"""
        return _isdbt_swig.carrier_modulation_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(carrier_modulation_sptr self)"""
        return _isdbt_swig.carrier_modulation_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(carrier_modulation_sptr self) -> bool"""
        return _isdbt_swig.carrier_modulation_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(carrier_modulation_sptr self, int m)"""
        return _isdbt_swig.carrier_modulation_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(carrier_modulation_sptr self) -> int"""
        return _isdbt_swig.carrier_modulation_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(carrier_modulation_sptr self, int i) -> long"""
        return _isdbt_swig.carrier_modulation_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(carrier_modulation_sptr self, long max_output_buffer)
        set_max_output_buffer(carrier_modulation_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.carrier_modulation_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(carrier_modulation_sptr self, int i) -> long"""
        return _isdbt_swig.carrier_modulation_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(carrier_modulation_sptr self, long min_output_buffer)
        set_min_output_buffer(carrier_modulation_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.carrier_modulation_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(carrier_modulation_sptr self, int which) -> float
        pc_input_buffers_full(carrier_modulation_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.carrier_modulation_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(carrier_modulation_sptr self, int which) -> float
        pc_input_buffers_full_avg(carrier_modulation_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.carrier_modulation_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(carrier_modulation_sptr self, int which) -> float
        pc_input_buffers_full_var(carrier_modulation_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.carrier_modulation_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(carrier_modulation_sptr self, int which) -> float
        pc_output_buffers_full(carrier_modulation_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.carrier_modulation_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(carrier_modulation_sptr self, int which) -> float
        pc_output_buffers_full_avg(carrier_modulation_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.carrier_modulation_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(carrier_modulation_sptr self, int which) -> float
        pc_output_buffers_full_var(carrier_modulation_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.carrier_modulation_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(carrier_modulation_sptr self) -> float"""
        return _isdbt_swig.carrier_modulation_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(carrier_modulation_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.carrier_modulation_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(carrier_modulation_sptr self)"""
        return _isdbt_swig.carrier_modulation_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(carrier_modulation_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.carrier_modulation_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(carrier_modulation_sptr self) -> int"""
        return _isdbt_swig.carrier_modulation_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(carrier_modulation_sptr self) -> int"""
        return _isdbt_swig.carrier_modulation_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(carrier_modulation_sptr self, int priority) -> int"""
        return _isdbt_swig.carrier_modulation_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(carrier_modulation_sptr self) -> std::string"""
        return _isdbt_swig.carrier_modulation_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(carrier_modulation_sptr self) -> std::string"""
        return _isdbt_swig.carrier_modulation_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(carrier_modulation_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.carrier_modulation_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(carrier_modulation_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.carrier_modulation_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(carrier_modulation_sptr self) -> long"""
        return _isdbt_swig.carrier_modulation_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(carrier_modulation_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.carrier_modulation_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(carrier_modulation_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.carrier_modulation_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(carrier_modulation_sptr self) -> std::string"""
        return _isdbt_swig.carrier_modulation_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(carrier_modulation_sptr self, std::string name)"""
        return _isdbt_swig.carrier_modulation_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(carrier_modulation_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.carrier_modulation_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(carrier_modulation_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.carrier_modulation_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(carrier_modulation_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.carrier_modulation_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(carrier_modulation_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.carrier_modulation_sptr_message_subscribers(self, which_port)

# Register carrier_modulation_sptr in _isdbt_swig:
_isdbt_swig.carrier_modulation_sptr_swigregister(carrier_modulation_sptr)


carrier_modulation_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
carrier_modulation = carrier_modulation.make;

class hierarchical_combinator(object):
    r"""Proxy of C++ gr::isdbt::hierarchical_combinator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", segments_A: "int", segments_B: "int", segments_C: "int") -> "gr::isdbt::hierarchical_combinator::sptr":
        r"""make(int mode, int segments_A, int segments_B, int segments_C) -> hierarchical_combinator_sptr"""
        return _isdbt_swig.hierarchical_combinator_make(mode, segments_A, segments_B, segments_C)
    __swig_destroy__ = _isdbt_swig.delete_hierarchical_combinator

# Register hierarchical_combinator in _isdbt_swig:
_isdbt_swig.hierarchical_combinator_swigregister(hierarchical_combinator)

def hierarchical_combinator_make(mode: "int", segments_A: "int", segments_B: "int", segments_C: "int") -> "gr::isdbt::hierarchical_combinator::sptr":
    r"""hierarchical_combinator_make(int mode, int segments_A, int segments_B, int segments_C) -> hierarchical_combinator_sptr"""
    return _isdbt_swig.hierarchical_combinator_make(mode, segments_A, segments_B, segments_C)

class hierarchical_combinator_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::hierarchical_combinator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(hierarchical_combinator_sptr self) -> hierarchical_combinator_sptr
        __init__(hierarchical_combinator_sptr self, hierarchical_combinator p) -> hierarchical_combinator_sptr
        """
        _isdbt_swig.hierarchical_combinator_sptr_swiginit(self, _isdbt_swig.new_hierarchical_combinator_sptr(*args))

    def __deref__(self) -> "gr::isdbt::hierarchical_combinator *":
        r"""__deref__(hierarchical_combinator_sptr self) -> hierarchical_combinator"""
        return _isdbt_swig.hierarchical_combinator_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_hierarchical_combinator_sptr

    def make(self, mode: "int", segments_A: "int", segments_B: "int", segments_C: "int") -> "gr::isdbt::hierarchical_combinator::sptr":
        r"""make(hierarchical_combinator_sptr self, int mode, int segments_A, int segments_B, int segments_C) -> hierarchical_combinator_sptr"""
        return _isdbt_swig.hierarchical_combinator_sptr_make(self, mode, segments_A, segments_B, segments_C)

    def history(self) -> "unsigned int":
        r"""history(hierarchical_combinator_sptr self) -> unsigned int"""
        return _isdbt_swig.hierarchical_combinator_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(hierarchical_combinator_sptr self, int which, int delay)
        declare_sample_delay(hierarchical_combinator_sptr self, unsigned int delay)
        """
        return _isdbt_swig.hierarchical_combinator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(hierarchical_combinator_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.hierarchical_combinator_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(hierarchical_combinator_sptr self, int multiple)"""
        return _isdbt_swig.hierarchical_combinator_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(hierarchical_combinator_sptr self) -> int"""
        return _isdbt_swig.hierarchical_combinator_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(hierarchical_combinator_sptr self) -> double"""
        return _isdbt_swig.hierarchical_combinator_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(hierarchical_combinator_sptr self) -> uint64_t"""
        return _isdbt_swig.hierarchical_combinator_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(hierarchical_combinator_sptr self) -> uint64_t"""
        return _isdbt_swig.hierarchical_combinator_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(hierarchical_combinator_sptr self) -> bool"""
        return _isdbt_swig.hierarchical_combinator_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(hierarchical_combinator_sptr self) -> bool"""
        return _isdbt_swig.hierarchical_combinator_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(hierarchical_combinator_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.hierarchical_combinator_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(hierarchical_combinator_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.hierarchical_combinator_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(hierarchical_combinator_sptr self, std::string level)"""
        return _isdbt_swig.hierarchical_combinator_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(hierarchical_combinator_sptr self) -> std::string"""
        return _isdbt_swig.hierarchical_combinator_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(hierarchical_combinator_sptr self) -> int"""
        return _isdbt_swig.hierarchical_combinator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(hierarchical_combinator_sptr self, int m)"""
        return _isdbt_swig.hierarchical_combinator_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(hierarchical_combinator_sptr self)"""
        return _isdbt_swig.hierarchical_combinator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(hierarchical_combinator_sptr self) -> bool"""
        return _isdbt_swig.hierarchical_combinator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(hierarchical_combinator_sptr self, int m)"""
        return _isdbt_swig.hierarchical_combinator_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(hierarchical_combinator_sptr self) -> int"""
        return _isdbt_swig.hierarchical_combinator_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(hierarchical_combinator_sptr self, int i) -> long"""
        return _isdbt_swig.hierarchical_combinator_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(hierarchical_combinator_sptr self, long max_output_buffer)
        set_max_output_buffer(hierarchical_combinator_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.hierarchical_combinator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(hierarchical_combinator_sptr self, int i) -> long"""
        return _isdbt_swig.hierarchical_combinator_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(hierarchical_combinator_sptr self, long min_output_buffer)
        set_min_output_buffer(hierarchical_combinator_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.hierarchical_combinator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(hierarchical_combinator_sptr self, int which) -> float
        pc_input_buffers_full(hierarchical_combinator_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.hierarchical_combinator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(hierarchical_combinator_sptr self, int which) -> float
        pc_input_buffers_full_avg(hierarchical_combinator_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.hierarchical_combinator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(hierarchical_combinator_sptr self, int which) -> float
        pc_input_buffers_full_var(hierarchical_combinator_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.hierarchical_combinator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(hierarchical_combinator_sptr self, int which) -> float
        pc_output_buffers_full(hierarchical_combinator_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.hierarchical_combinator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(hierarchical_combinator_sptr self, int which) -> float
        pc_output_buffers_full_avg(hierarchical_combinator_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.hierarchical_combinator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(hierarchical_combinator_sptr self, int which) -> float
        pc_output_buffers_full_var(hierarchical_combinator_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.hierarchical_combinator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(hierarchical_combinator_sptr self) -> float"""
        return _isdbt_swig.hierarchical_combinator_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(hierarchical_combinator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.hierarchical_combinator_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(hierarchical_combinator_sptr self)"""
        return _isdbt_swig.hierarchical_combinator_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(hierarchical_combinator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.hierarchical_combinator_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(hierarchical_combinator_sptr self) -> int"""
        return _isdbt_swig.hierarchical_combinator_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(hierarchical_combinator_sptr self) -> int"""
        return _isdbt_swig.hierarchical_combinator_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(hierarchical_combinator_sptr self, int priority) -> int"""
        return _isdbt_swig.hierarchical_combinator_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(hierarchical_combinator_sptr self) -> std::string"""
        return _isdbt_swig.hierarchical_combinator_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(hierarchical_combinator_sptr self) -> std::string"""
        return _isdbt_swig.hierarchical_combinator_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(hierarchical_combinator_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.hierarchical_combinator_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(hierarchical_combinator_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.hierarchical_combinator_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(hierarchical_combinator_sptr self) -> long"""
        return _isdbt_swig.hierarchical_combinator_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(hierarchical_combinator_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.hierarchical_combinator_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(hierarchical_combinator_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.hierarchical_combinator_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(hierarchical_combinator_sptr self) -> std::string"""
        return _isdbt_swig.hierarchical_combinator_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(hierarchical_combinator_sptr self, std::string name)"""
        return _isdbt_swig.hierarchical_combinator_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(hierarchical_combinator_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.hierarchical_combinator_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(hierarchical_combinator_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.hierarchical_combinator_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(hierarchical_combinator_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.hierarchical_combinator_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(hierarchical_combinator_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.hierarchical_combinator_sptr_message_subscribers(self, which_port)

# Register hierarchical_combinator_sptr in _isdbt_swig:
_isdbt_swig.hierarchical_combinator_sptr_swigregister(hierarchical_combinator_sptr)


hierarchical_combinator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hierarchical_combinator = hierarchical_combinator.make;

class time_interleaver(object):
    r"""Proxy of C++ gr::isdbt::time_interleaver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", segments_A: "int", length_A: "int", segments_B: "int", length_B: "int", segments_C: "int", length_C: "int") -> "gr::isdbt::time_interleaver::sptr":
        r"""make(int mode, int segments_A, int length_A, int segments_B, int length_B, int segments_C, int length_C) -> time_interleaver_sptr"""
        return _isdbt_swig.time_interleaver_make(mode, segments_A, length_A, segments_B, length_B, segments_C, length_C)
    __swig_destroy__ = _isdbt_swig.delete_time_interleaver

# Register time_interleaver in _isdbt_swig:
_isdbt_swig.time_interleaver_swigregister(time_interleaver)

def time_interleaver_make(mode: "int", segments_A: "int", length_A: "int", segments_B: "int", length_B: "int", segments_C: "int", length_C: "int") -> "gr::isdbt::time_interleaver::sptr":
    r"""time_interleaver_make(int mode, int segments_A, int length_A, int segments_B, int length_B, int segments_C, int length_C) -> time_interleaver_sptr"""
    return _isdbt_swig.time_interleaver_make(mode, segments_A, length_A, segments_B, length_B, segments_C, length_C)

class time_interleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::time_interleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(time_interleaver_sptr self) -> time_interleaver_sptr
        __init__(time_interleaver_sptr self, time_interleaver p) -> time_interleaver_sptr
        """
        _isdbt_swig.time_interleaver_sptr_swiginit(self, _isdbt_swig.new_time_interleaver_sptr(*args))

    def __deref__(self) -> "gr::isdbt::time_interleaver *":
        r"""__deref__(time_interleaver_sptr self) -> time_interleaver"""
        return _isdbt_swig.time_interleaver_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_time_interleaver_sptr

    def make(self, mode: "int", segments_A: "int", length_A: "int", segments_B: "int", length_B: "int", segments_C: "int", length_C: "int") -> "gr::isdbt::time_interleaver::sptr":
        r"""make(time_interleaver_sptr self, int mode, int segments_A, int length_A, int segments_B, int length_B, int segments_C, int length_C) -> time_interleaver_sptr"""
        return _isdbt_swig.time_interleaver_sptr_make(self, mode, segments_A, length_A, segments_B, length_B, segments_C, length_C)

    def history(self) -> "unsigned int":
        r"""history(time_interleaver_sptr self) -> unsigned int"""
        return _isdbt_swig.time_interleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(time_interleaver_sptr self, int which, int delay)
        declare_sample_delay(time_interleaver_sptr self, unsigned int delay)
        """
        return _isdbt_swig.time_interleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(time_interleaver_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.time_interleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(time_interleaver_sptr self, int multiple)"""
        return _isdbt_swig.time_interleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(time_interleaver_sptr self) -> int"""
        return _isdbt_swig.time_interleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(time_interleaver_sptr self) -> double"""
        return _isdbt_swig.time_interleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(time_interleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.time_interleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(time_interleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.time_interleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(time_interleaver_sptr self) -> bool"""
        return _isdbt_swig.time_interleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(time_interleaver_sptr self) -> bool"""
        return _isdbt_swig.time_interleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(time_interleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.time_interleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(time_interleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.time_interleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(time_interleaver_sptr self, std::string level)"""
        return _isdbt_swig.time_interleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(time_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.time_interleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(time_interleaver_sptr self) -> int"""
        return _isdbt_swig.time_interleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(time_interleaver_sptr self, int m)"""
        return _isdbt_swig.time_interleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(time_interleaver_sptr self)"""
        return _isdbt_swig.time_interleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(time_interleaver_sptr self) -> bool"""
        return _isdbt_swig.time_interleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(time_interleaver_sptr self, int m)"""
        return _isdbt_swig.time_interleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(time_interleaver_sptr self) -> int"""
        return _isdbt_swig.time_interleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(time_interleaver_sptr self, int i) -> long"""
        return _isdbt_swig.time_interleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(time_interleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(time_interleaver_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.time_interleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(time_interleaver_sptr self, int i) -> long"""
        return _isdbt_swig.time_interleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(time_interleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(time_interleaver_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.time_interleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(time_interleaver_sptr self, int which) -> float
        pc_input_buffers_full(time_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_interleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(time_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(time_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_interleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(time_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(time_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_interleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(time_interleaver_sptr self, int which) -> float
        pc_output_buffers_full(time_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_interleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(time_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(time_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_interleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(time_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(time_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_interleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(time_interleaver_sptr self) -> float"""
        return _isdbt_swig.time_interleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(time_interleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.time_interleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(time_interleaver_sptr self)"""
        return _isdbt_swig.time_interleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(time_interleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.time_interleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(time_interleaver_sptr self) -> int"""
        return _isdbt_swig.time_interleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(time_interleaver_sptr self) -> int"""
        return _isdbt_swig.time_interleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(time_interleaver_sptr self, int priority) -> int"""
        return _isdbt_swig.time_interleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(time_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.time_interleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(time_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.time_interleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(time_interleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.time_interleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(time_interleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.time_interleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(time_interleaver_sptr self) -> long"""
        return _isdbt_swig.time_interleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(time_interleaver_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.time_interleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(time_interleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.time_interleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(time_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.time_interleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(time_interleaver_sptr self, std::string name)"""
        return _isdbt_swig.time_interleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(time_interleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.time_interleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(time_interleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.time_interleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(time_interleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.time_interleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(time_interleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.time_interleaver_sptr_message_subscribers(self, which_port)

# Register time_interleaver_sptr in _isdbt_swig:
_isdbt_swig.time_interleaver_sptr_swigregister(time_interleaver_sptr)


time_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
time_interleaver = time_interleaver.make;

class frequency_interleaver(object):
    r"""Proxy of C++ gr::isdbt::frequency_interleaver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(oneseg: "bool", mode: "int") -> "gr::isdbt::frequency_interleaver::sptr":
        r"""make(bool oneseg, int mode) -> frequency_interleaver_sptr"""
        return _isdbt_swig.frequency_interleaver_make(oneseg, mode)
    __swig_destroy__ = _isdbt_swig.delete_frequency_interleaver

# Register frequency_interleaver in _isdbt_swig:
_isdbt_swig.frequency_interleaver_swigregister(frequency_interleaver)

def frequency_interleaver_make(oneseg: "bool", mode: "int") -> "gr::isdbt::frequency_interleaver::sptr":
    r"""frequency_interleaver_make(bool oneseg, int mode) -> frequency_interleaver_sptr"""
    return _isdbt_swig.frequency_interleaver_make(oneseg, mode)

class frequency_interleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::frequency_interleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(frequency_interleaver_sptr self) -> frequency_interleaver_sptr
        __init__(frequency_interleaver_sptr self, frequency_interleaver p) -> frequency_interleaver_sptr
        """
        _isdbt_swig.frequency_interleaver_sptr_swiginit(self, _isdbt_swig.new_frequency_interleaver_sptr(*args))

    def __deref__(self) -> "gr::isdbt::frequency_interleaver *":
        r"""__deref__(frequency_interleaver_sptr self) -> frequency_interleaver"""
        return _isdbt_swig.frequency_interleaver_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_frequency_interleaver_sptr

    def make(self, oneseg: "bool", mode: "int") -> "gr::isdbt::frequency_interleaver::sptr":
        r"""make(frequency_interleaver_sptr self, bool oneseg, int mode) -> frequency_interleaver_sptr"""
        return _isdbt_swig.frequency_interleaver_sptr_make(self, oneseg, mode)

    def history(self) -> "unsigned int":
        r"""history(frequency_interleaver_sptr self) -> unsigned int"""
        return _isdbt_swig.frequency_interleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(frequency_interleaver_sptr self, int which, int delay)
        declare_sample_delay(frequency_interleaver_sptr self, unsigned int delay)
        """
        return _isdbt_swig.frequency_interleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(frequency_interleaver_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.frequency_interleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(frequency_interleaver_sptr self, int multiple)"""
        return _isdbt_swig.frequency_interleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(frequency_interleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_interleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(frequency_interleaver_sptr self) -> double"""
        return _isdbt_swig.frequency_interleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(frequency_interleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.frequency_interleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(frequency_interleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.frequency_interleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(frequency_interleaver_sptr self) -> bool"""
        return _isdbt_swig.frequency_interleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(frequency_interleaver_sptr self) -> bool"""
        return _isdbt_swig.frequency_interleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(frequency_interleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.frequency_interleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(frequency_interleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.frequency_interleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(frequency_interleaver_sptr self, std::string level)"""
        return _isdbt_swig.frequency_interleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(frequency_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.frequency_interleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(frequency_interleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_interleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(frequency_interleaver_sptr self, int m)"""
        return _isdbt_swig.frequency_interleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(frequency_interleaver_sptr self)"""
        return _isdbt_swig.frequency_interleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(frequency_interleaver_sptr self) -> bool"""
        return _isdbt_swig.frequency_interleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(frequency_interleaver_sptr self, int m)"""
        return _isdbt_swig.frequency_interleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(frequency_interleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_interleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(frequency_interleaver_sptr self, int i) -> long"""
        return _isdbt_swig.frequency_interleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(frequency_interleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(frequency_interleaver_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.frequency_interleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(frequency_interleaver_sptr self, int i) -> long"""
        return _isdbt_swig.frequency_interleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(frequency_interleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(frequency_interleaver_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.frequency_interleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(frequency_interleaver_sptr self, int which) -> float
        pc_input_buffers_full(frequency_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_interleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(frequency_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(frequency_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_interleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(frequency_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(frequency_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_interleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(frequency_interleaver_sptr self, int which) -> float
        pc_output_buffers_full(frequency_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_interleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(frequency_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(frequency_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_interleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(frequency_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(frequency_interleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_interleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(frequency_interleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_interleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(frequency_interleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.frequency_interleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(frequency_interleaver_sptr self)"""
        return _isdbt_swig.frequency_interleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(frequency_interleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.frequency_interleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(frequency_interleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_interleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(frequency_interleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_interleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(frequency_interleaver_sptr self, int priority) -> int"""
        return _isdbt_swig.frequency_interleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(frequency_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.frequency_interleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(frequency_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.frequency_interleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(frequency_interleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.frequency_interleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(frequency_interleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.frequency_interleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(frequency_interleaver_sptr self) -> long"""
        return _isdbt_swig.frequency_interleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(frequency_interleaver_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.frequency_interleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(frequency_interleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.frequency_interleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(frequency_interleaver_sptr self) -> std::string"""
        return _isdbt_swig.frequency_interleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(frequency_interleaver_sptr self, std::string name)"""
        return _isdbt_swig.frequency_interleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(frequency_interleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.frequency_interleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(frequency_interleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.frequency_interleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(frequency_interleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.frequency_interleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(frequency_interleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.frequency_interleaver_sptr_message_subscribers(self, which_port)

# Register frequency_interleaver_sptr in _isdbt_swig:
_isdbt_swig.frequency_interleaver_sptr_swigregister(frequency_interleaver_sptr)


frequency_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frequency_interleaver = frequency_interleaver.make;

class time_deinterleaver(object):
    r"""Proxy of C++ gr::isdbt::time_deinterleaver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", segments_A: "int", length_A: "int", segments_B: "int", length_B: "int", segments_C: "int", length_C: "int") -> "gr::isdbt::time_deinterleaver::sptr":
        r"""make(int mode, int segments_A, int length_A, int segments_B, int length_B, int segments_C, int length_C) -> time_deinterleaver_sptr"""
        return _isdbt_swig.time_deinterleaver_make(mode, segments_A, length_A, segments_B, length_B, segments_C, length_C)
    __swig_destroy__ = _isdbt_swig.delete_time_deinterleaver

# Register time_deinterleaver in _isdbt_swig:
_isdbt_swig.time_deinterleaver_swigregister(time_deinterleaver)

def time_deinterleaver_make(mode: "int", segments_A: "int", length_A: "int", segments_B: "int", length_B: "int", segments_C: "int", length_C: "int") -> "gr::isdbt::time_deinterleaver::sptr":
    r"""time_deinterleaver_make(int mode, int segments_A, int length_A, int segments_B, int length_B, int segments_C, int length_C) -> time_deinterleaver_sptr"""
    return _isdbt_swig.time_deinterleaver_make(mode, segments_A, length_A, segments_B, length_B, segments_C, length_C)

class time_deinterleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::time_deinterleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(time_deinterleaver_sptr self) -> time_deinterleaver_sptr
        __init__(time_deinterleaver_sptr self, time_deinterleaver p) -> time_deinterleaver_sptr
        """
        _isdbt_swig.time_deinterleaver_sptr_swiginit(self, _isdbt_swig.new_time_deinterleaver_sptr(*args))

    def __deref__(self) -> "gr::isdbt::time_deinterleaver *":
        r"""__deref__(time_deinterleaver_sptr self) -> time_deinterleaver"""
        return _isdbt_swig.time_deinterleaver_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_time_deinterleaver_sptr

    def make(self, mode: "int", segments_A: "int", length_A: "int", segments_B: "int", length_B: "int", segments_C: "int", length_C: "int") -> "gr::isdbt::time_deinterleaver::sptr":
        r"""make(time_deinterleaver_sptr self, int mode, int segments_A, int length_A, int segments_B, int length_B, int segments_C, int length_C) -> time_deinterleaver_sptr"""
        return _isdbt_swig.time_deinterleaver_sptr_make(self, mode, segments_A, length_A, segments_B, length_B, segments_C, length_C)

    def history(self) -> "unsigned int":
        r"""history(time_deinterleaver_sptr self) -> unsigned int"""
        return _isdbt_swig.time_deinterleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(time_deinterleaver_sptr self, int which, int delay)
        declare_sample_delay(time_deinterleaver_sptr self, unsigned int delay)
        """
        return _isdbt_swig.time_deinterleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(time_deinterleaver_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.time_deinterleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(time_deinterleaver_sptr self, int multiple)"""
        return _isdbt_swig.time_deinterleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(time_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.time_deinterleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(time_deinterleaver_sptr self) -> double"""
        return _isdbt_swig.time_deinterleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(time_deinterleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.time_deinterleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(time_deinterleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.time_deinterleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(time_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.time_deinterleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(time_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.time_deinterleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(time_deinterleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.time_deinterleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(time_deinterleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.time_deinterleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(time_deinterleaver_sptr self, std::string level)"""
        return _isdbt_swig.time_deinterleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(time_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.time_deinterleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(time_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.time_deinterleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(time_deinterleaver_sptr self, int m)"""
        return _isdbt_swig.time_deinterleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(time_deinterleaver_sptr self)"""
        return _isdbt_swig.time_deinterleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(time_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.time_deinterleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(time_deinterleaver_sptr self, int m)"""
        return _isdbt_swig.time_deinterleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(time_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.time_deinterleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(time_deinterleaver_sptr self, int i) -> long"""
        return _isdbt_swig.time_deinterleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(time_deinterleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(time_deinterleaver_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.time_deinterleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(time_deinterleaver_sptr self, int i) -> long"""
        return _isdbt_swig.time_deinterleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(time_deinterleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(time_deinterleaver_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.time_deinterleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(time_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full(time_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_deinterleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(time_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(time_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_deinterleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(time_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(time_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_deinterleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(time_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full(time_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_deinterleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(time_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(time_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_deinterleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(time_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(time_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.time_deinterleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(time_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.time_deinterleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(time_deinterleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.time_deinterleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(time_deinterleaver_sptr self)"""
        return _isdbt_swig.time_deinterleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(time_deinterleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.time_deinterleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(time_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.time_deinterleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(time_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.time_deinterleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(time_deinterleaver_sptr self, int priority) -> int"""
        return _isdbt_swig.time_deinterleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(time_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.time_deinterleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(time_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.time_deinterleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(time_deinterleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.time_deinterleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(time_deinterleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.time_deinterleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(time_deinterleaver_sptr self) -> long"""
        return _isdbt_swig.time_deinterleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(time_deinterleaver_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.time_deinterleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(time_deinterleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.time_deinterleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(time_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.time_deinterleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(time_deinterleaver_sptr self, std::string name)"""
        return _isdbt_swig.time_deinterleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(time_deinterleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.time_deinterleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(time_deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.time_deinterleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(time_deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.time_deinterleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(time_deinterleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.time_deinterleaver_sptr_message_subscribers(self, which_port)

# Register time_deinterleaver_sptr in _isdbt_swig:
_isdbt_swig.time_deinterleaver_sptr_swigregister(time_deinterleaver_sptr)


time_deinterleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
time_deinterleaver = time_deinterleaver.make;

class frequency_deinterleaver(object):
    r"""Proxy of C++ gr::isdbt::frequency_deinterleaver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(oneseg: "bool", mode: "int") -> "gr::isdbt::frequency_deinterleaver::sptr":
        r"""make(bool oneseg, int mode) -> frequency_deinterleaver_sptr"""
        return _isdbt_swig.frequency_deinterleaver_make(oneseg, mode)
    __swig_destroy__ = _isdbt_swig.delete_frequency_deinterleaver

# Register frequency_deinterleaver in _isdbt_swig:
_isdbt_swig.frequency_deinterleaver_swigregister(frequency_deinterleaver)

def frequency_deinterleaver_make(oneseg: "bool", mode: "int") -> "gr::isdbt::frequency_deinterleaver::sptr":
    r"""frequency_deinterleaver_make(bool oneseg, int mode) -> frequency_deinterleaver_sptr"""
    return _isdbt_swig.frequency_deinterleaver_make(oneseg, mode)

class frequency_deinterleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::frequency_deinterleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(frequency_deinterleaver_sptr self) -> frequency_deinterleaver_sptr
        __init__(frequency_deinterleaver_sptr self, frequency_deinterleaver p) -> frequency_deinterleaver_sptr
        """
        _isdbt_swig.frequency_deinterleaver_sptr_swiginit(self, _isdbt_swig.new_frequency_deinterleaver_sptr(*args))

    def __deref__(self) -> "gr::isdbt::frequency_deinterleaver *":
        r"""__deref__(frequency_deinterleaver_sptr self) -> frequency_deinterleaver"""
        return _isdbt_swig.frequency_deinterleaver_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_frequency_deinterleaver_sptr

    def make(self, oneseg: "bool", mode: "int") -> "gr::isdbt::frequency_deinterleaver::sptr":
        r"""make(frequency_deinterleaver_sptr self, bool oneseg, int mode) -> frequency_deinterleaver_sptr"""
        return _isdbt_swig.frequency_deinterleaver_sptr_make(self, oneseg, mode)

    def history(self) -> "unsigned int":
        r"""history(frequency_deinterleaver_sptr self) -> unsigned int"""
        return _isdbt_swig.frequency_deinterleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(frequency_deinterleaver_sptr self, int which, int delay)
        declare_sample_delay(frequency_deinterleaver_sptr self, unsigned int delay)
        """
        return _isdbt_swig.frequency_deinterleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(frequency_deinterleaver_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.frequency_deinterleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(frequency_deinterleaver_sptr self, int multiple)"""
        return _isdbt_swig.frequency_deinterleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(frequency_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_deinterleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(frequency_deinterleaver_sptr self) -> double"""
        return _isdbt_swig.frequency_deinterleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(frequency_deinterleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.frequency_deinterleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(frequency_deinterleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.frequency_deinterleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(frequency_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.frequency_deinterleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(frequency_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.frequency_deinterleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(frequency_deinterleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.frequency_deinterleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(frequency_deinterleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.frequency_deinterleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(frequency_deinterleaver_sptr self, std::string level)"""
        return _isdbt_swig.frequency_deinterleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(frequency_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.frequency_deinterleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(frequency_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_deinterleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(frequency_deinterleaver_sptr self, int m)"""
        return _isdbt_swig.frequency_deinterleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(frequency_deinterleaver_sptr self)"""
        return _isdbt_swig.frequency_deinterleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(frequency_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.frequency_deinterleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(frequency_deinterleaver_sptr self, int m)"""
        return _isdbt_swig.frequency_deinterleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(frequency_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_deinterleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(frequency_deinterleaver_sptr self, int i) -> long"""
        return _isdbt_swig.frequency_deinterleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(frequency_deinterleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(frequency_deinterleaver_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.frequency_deinterleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(frequency_deinterleaver_sptr self, int i) -> long"""
        return _isdbt_swig.frequency_deinterleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(frequency_deinterleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(frequency_deinterleaver_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.frequency_deinterleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(frequency_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full(frequency_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(frequency_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(frequency_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(frequency_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(frequency_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(frequency_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full(frequency_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(frequency_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(frequency_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(frequency_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(frequency_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(frequency_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.frequency_deinterleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(frequency_deinterleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.frequency_deinterleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(frequency_deinterleaver_sptr self)"""
        return _isdbt_swig.frequency_deinterleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(frequency_deinterleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.frequency_deinterleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(frequency_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_deinterleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(frequency_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.frequency_deinterleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(frequency_deinterleaver_sptr self, int priority) -> int"""
        return _isdbt_swig.frequency_deinterleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(frequency_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.frequency_deinterleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(frequency_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.frequency_deinterleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(frequency_deinterleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.frequency_deinterleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(frequency_deinterleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.frequency_deinterleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(frequency_deinterleaver_sptr self) -> long"""
        return _isdbt_swig.frequency_deinterleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(frequency_deinterleaver_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.frequency_deinterleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(frequency_deinterleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.frequency_deinterleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(frequency_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.frequency_deinterleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(frequency_deinterleaver_sptr self, std::string name)"""
        return _isdbt_swig.frequency_deinterleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(frequency_deinterleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.frequency_deinterleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(frequency_deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.frequency_deinterleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(frequency_deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.frequency_deinterleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(frequency_deinterleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.frequency_deinterleaver_sptr_message_subscribers(self, which_port)

# Register frequency_deinterleaver_sptr in _isdbt_swig:
_isdbt_swig.frequency_deinterleaver_sptr_swigregister(frequency_deinterleaver_sptr)


frequency_deinterleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frequency_deinterleaver = frequency_deinterleaver.make;

class symbol_demapper(object):
    r"""Proxy of C++ gr::isdbt::symbol_demapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", segments_A: "int", constellation_size_A: "int", segments_B: "int", constellation_size_B: "int", segments_C: "int", constellation_size_C: "int") -> "gr::isdbt::symbol_demapper::sptr":
        r"""make(int mode, int segments_A, int constellation_size_A, int segments_B, int constellation_size_B, int segments_C, int constellation_size_C) -> symbol_demapper_sptr"""
        return _isdbt_swig.symbol_demapper_make(mode, segments_A, constellation_size_A, segments_B, constellation_size_B, segments_C, constellation_size_C)
    __swig_destroy__ = _isdbt_swig.delete_symbol_demapper

# Register symbol_demapper in _isdbt_swig:
_isdbt_swig.symbol_demapper_swigregister(symbol_demapper)

def symbol_demapper_make(mode: "int", segments_A: "int", constellation_size_A: "int", segments_B: "int", constellation_size_B: "int", segments_C: "int", constellation_size_C: "int") -> "gr::isdbt::symbol_demapper::sptr":
    r"""symbol_demapper_make(int mode, int segments_A, int constellation_size_A, int segments_B, int constellation_size_B, int segments_C, int constellation_size_C) -> symbol_demapper_sptr"""
    return _isdbt_swig.symbol_demapper_make(mode, segments_A, constellation_size_A, segments_B, constellation_size_B, segments_C, constellation_size_C)

class symbol_demapper_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::symbol_demapper > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(symbol_demapper_sptr self) -> symbol_demapper_sptr
        __init__(symbol_demapper_sptr self, symbol_demapper p) -> symbol_demapper_sptr
        """
        _isdbt_swig.symbol_demapper_sptr_swiginit(self, _isdbt_swig.new_symbol_demapper_sptr(*args))

    def __deref__(self) -> "gr::isdbt::symbol_demapper *":
        r"""__deref__(symbol_demapper_sptr self) -> symbol_demapper"""
        return _isdbt_swig.symbol_demapper_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_symbol_demapper_sptr

    def make(self, mode: "int", segments_A: "int", constellation_size_A: "int", segments_B: "int", constellation_size_B: "int", segments_C: "int", constellation_size_C: "int") -> "gr::isdbt::symbol_demapper::sptr":
        r"""make(symbol_demapper_sptr self, int mode, int segments_A, int constellation_size_A, int segments_B, int constellation_size_B, int segments_C, int constellation_size_C) -> symbol_demapper_sptr"""
        return _isdbt_swig.symbol_demapper_sptr_make(self, mode, segments_A, constellation_size_A, segments_B, constellation_size_B, segments_C, constellation_size_C)

    def history(self) -> "unsigned int":
        r"""history(symbol_demapper_sptr self) -> unsigned int"""
        return _isdbt_swig.symbol_demapper_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(symbol_demapper_sptr self, int which, int delay)
        declare_sample_delay(symbol_demapper_sptr self, unsigned int delay)
        """
        return _isdbt_swig.symbol_demapper_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(symbol_demapper_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.symbol_demapper_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(symbol_demapper_sptr self, int multiple)"""
        return _isdbt_swig.symbol_demapper_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(symbol_demapper_sptr self) -> int"""
        return _isdbt_swig.symbol_demapper_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(symbol_demapper_sptr self) -> double"""
        return _isdbt_swig.symbol_demapper_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(symbol_demapper_sptr self) -> uint64_t"""
        return _isdbt_swig.symbol_demapper_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(symbol_demapper_sptr self) -> uint64_t"""
        return _isdbt_swig.symbol_demapper_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(symbol_demapper_sptr self) -> bool"""
        return _isdbt_swig.symbol_demapper_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(symbol_demapper_sptr self) -> bool"""
        return _isdbt_swig.symbol_demapper_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(symbol_demapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.symbol_demapper_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(symbol_demapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.symbol_demapper_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(symbol_demapper_sptr self, std::string level)"""
        return _isdbt_swig.symbol_demapper_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(symbol_demapper_sptr self) -> std::string"""
        return _isdbt_swig.symbol_demapper_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(symbol_demapper_sptr self) -> int"""
        return _isdbt_swig.symbol_demapper_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(symbol_demapper_sptr self, int m)"""
        return _isdbt_swig.symbol_demapper_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(symbol_demapper_sptr self)"""
        return _isdbt_swig.symbol_demapper_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(symbol_demapper_sptr self) -> bool"""
        return _isdbt_swig.symbol_demapper_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(symbol_demapper_sptr self, int m)"""
        return _isdbt_swig.symbol_demapper_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(symbol_demapper_sptr self) -> int"""
        return _isdbt_swig.symbol_demapper_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(symbol_demapper_sptr self, int i) -> long"""
        return _isdbt_swig.symbol_demapper_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(symbol_demapper_sptr self, long max_output_buffer)
        set_max_output_buffer(symbol_demapper_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.symbol_demapper_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(symbol_demapper_sptr self, int i) -> long"""
        return _isdbt_swig.symbol_demapper_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(symbol_demapper_sptr self, long min_output_buffer)
        set_min_output_buffer(symbol_demapper_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.symbol_demapper_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(symbol_demapper_sptr self, int which) -> float
        pc_input_buffers_full(symbol_demapper_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.symbol_demapper_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(symbol_demapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(symbol_demapper_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.symbol_demapper_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(symbol_demapper_sptr self, int which) -> float
        pc_input_buffers_full_var(symbol_demapper_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.symbol_demapper_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(symbol_demapper_sptr self, int which) -> float
        pc_output_buffers_full(symbol_demapper_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.symbol_demapper_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(symbol_demapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(symbol_demapper_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.symbol_demapper_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(symbol_demapper_sptr self, int which) -> float
        pc_output_buffers_full_var(symbol_demapper_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.symbol_demapper_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(symbol_demapper_sptr self) -> float"""
        return _isdbt_swig.symbol_demapper_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(symbol_demapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.symbol_demapper_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(symbol_demapper_sptr self)"""
        return _isdbt_swig.symbol_demapper_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(symbol_demapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.symbol_demapper_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(symbol_demapper_sptr self) -> int"""
        return _isdbt_swig.symbol_demapper_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(symbol_demapper_sptr self) -> int"""
        return _isdbt_swig.symbol_demapper_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(symbol_demapper_sptr self, int priority) -> int"""
        return _isdbt_swig.symbol_demapper_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(symbol_demapper_sptr self) -> std::string"""
        return _isdbt_swig.symbol_demapper_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(symbol_demapper_sptr self) -> std::string"""
        return _isdbt_swig.symbol_demapper_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(symbol_demapper_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.symbol_demapper_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(symbol_demapper_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.symbol_demapper_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(symbol_demapper_sptr self) -> long"""
        return _isdbt_swig.symbol_demapper_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(symbol_demapper_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.symbol_demapper_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(symbol_demapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.symbol_demapper_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(symbol_demapper_sptr self) -> std::string"""
        return _isdbt_swig.symbol_demapper_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(symbol_demapper_sptr self, std::string name)"""
        return _isdbt_swig.symbol_demapper_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(symbol_demapper_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.symbol_demapper_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(symbol_demapper_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.symbol_demapper_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(symbol_demapper_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.symbol_demapper_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(symbol_demapper_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.symbol_demapper_sptr_message_subscribers(self, which_port)

# Register symbol_demapper_sptr in _isdbt_swig:
_isdbt_swig.symbol_demapper_sptr_swigregister(symbol_demapper_sptr)


symbol_demapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
symbol_demapper = symbol_demapper.make;

class bit_deinterleaver(object):
    r"""Proxy of C++ gr::isdbt::bit_deinterleaver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", segments: "int", constellation_size: "int") -> "gr::isdbt::bit_deinterleaver::sptr":
        r"""make(int mode, int segments, int constellation_size) -> bit_deinterleaver_sptr"""
        return _isdbt_swig.bit_deinterleaver_make(mode, segments, constellation_size)
    __swig_destroy__ = _isdbt_swig.delete_bit_deinterleaver

# Register bit_deinterleaver in _isdbt_swig:
_isdbt_swig.bit_deinterleaver_swigregister(bit_deinterleaver)

def bit_deinterleaver_make(mode: "int", segments: "int", constellation_size: "int") -> "gr::isdbt::bit_deinterleaver::sptr":
    r"""bit_deinterleaver_make(int mode, int segments, int constellation_size) -> bit_deinterleaver_sptr"""
    return _isdbt_swig.bit_deinterleaver_make(mode, segments, constellation_size)

class bit_deinterleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::bit_deinterleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(bit_deinterleaver_sptr self) -> bit_deinterleaver_sptr
        __init__(bit_deinterleaver_sptr self, bit_deinterleaver p) -> bit_deinterleaver_sptr
        """
        _isdbt_swig.bit_deinterleaver_sptr_swiginit(self, _isdbt_swig.new_bit_deinterleaver_sptr(*args))

    def __deref__(self) -> "gr::isdbt::bit_deinterleaver *":
        r"""__deref__(bit_deinterleaver_sptr self) -> bit_deinterleaver"""
        return _isdbt_swig.bit_deinterleaver_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_bit_deinterleaver_sptr

    def make(self, mode: "int", segments: "int", constellation_size: "int") -> "gr::isdbt::bit_deinterleaver::sptr":
        r"""make(bit_deinterleaver_sptr self, int mode, int segments, int constellation_size) -> bit_deinterleaver_sptr"""
        return _isdbt_swig.bit_deinterleaver_sptr_make(self, mode, segments, constellation_size)

    def history(self) -> "unsigned int":
        r"""history(bit_deinterleaver_sptr self) -> unsigned int"""
        return _isdbt_swig.bit_deinterleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(bit_deinterleaver_sptr self, int which, int delay)
        declare_sample_delay(bit_deinterleaver_sptr self, unsigned int delay)
        """
        return _isdbt_swig.bit_deinterleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(bit_deinterleaver_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.bit_deinterleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(bit_deinterleaver_sptr self, int multiple)"""
        return _isdbt_swig.bit_deinterleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(bit_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.bit_deinterleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(bit_deinterleaver_sptr self) -> double"""
        return _isdbt_swig.bit_deinterleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(bit_deinterleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.bit_deinterleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(bit_deinterleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.bit_deinterleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(bit_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.bit_deinterleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(bit_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.bit_deinterleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(bit_deinterleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.bit_deinterleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(bit_deinterleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.bit_deinterleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(bit_deinterleaver_sptr self, std::string level)"""
        return _isdbt_swig.bit_deinterleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(bit_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.bit_deinterleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(bit_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.bit_deinterleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(bit_deinterleaver_sptr self, int m)"""
        return _isdbt_swig.bit_deinterleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(bit_deinterleaver_sptr self)"""
        return _isdbt_swig.bit_deinterleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(bit_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.bit_deinterleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(bit_deinterleaver_sptr self, int m)"""
        return _isdbt_swig.bit_deinterleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(bit_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.bit_deinterleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(bit_deinterleaver_sptr self, int i) -> long"""
        return _isdbt_swig.bit_deinterleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(bit_deinterleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(bit_deinterleaver_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.bit_deinterleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(bit_deinterleaver_sptr self, int i) -> long"""
        return _isdbt_swig.bit_deinterleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(bit_deinterleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(bit_deinterleaver_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.bit_deinterleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(bit_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full(bit_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.bit_deinterleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(bit_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(bit_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.bit_deinterleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(bit_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(bit_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.bit_deinterleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(bit_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full(bit_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.bit_deinterleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(bit_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(bit_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.bit_deinterleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(bit_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(bit_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.bit_deinterleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(bit_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.bit_deinterleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(bit_deinterleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.bit_deinterleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(bit_deinterleaver_sptr self)"""
        return _isdbt_swig.bit_deinterleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(bit_deinterleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.bit_deinterleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(bit_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.bit_deinterleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(bit_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.bit_deinterleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(bit_deinterleaver_sptr self, int priority) -> int"""
        return _isdbt_swig.bit_deinterleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(bit_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.bit_deinterleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(bit_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.bit_deinterleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(bit_deinterleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.bit_deinterleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(bit_deinterleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.bit_deinterleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(bit_deinterleaver_sptr self) -> long"""
        return _isdbt_swig.bit_deinterleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(bit_deinterleaver_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.bit_deinterleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(bit_deinterleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.bit_deinterleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(bit_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.bit_deinterleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(bit_deinterleaver_sptr self, std::string name)"""
        return _isdbt_swig.bit_deinterleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(bit_deinterleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.bit_deinterleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(bit_deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.bit_deinterleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(bit_deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.bit_deinterleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(bit_deinterleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.bit_deinterleaver_sptr_message_subscribers(self, which_port)

# Register bit_deinterleaver_sptr in _isdbt_swig:
_isdbt_swig.bit_deinterleaver_sptr_swigregister(bit_deinterleaver_sptr)


bit_deinterleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bit_deinterleaver = bit_deinterleaver.make;

class byte_deinterleaver(object):
    r"""Proxy of C++ gr::isdbt::byte_deinterleaver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::isdbt::byte_deinterleaver::sptr":
        r"""make() -> byte_deinterleaver_sptr"""
        return _isdbt_swig.byte_deinterleaver_make()
    __swig_destroy__ = _isdbt_swig.delete_byte_deinterleaver

# Register byte_deinterleaver in _isdbt_swig:
_isdbt_swig.byte_deinterleaver_swigregister(byte_deinterleaver)

def byte_deinterleaver_make() -> "gr::isdbt::byte_deinterleaver::sptr":
    r"""byte_deinterleaver_make() -> byte_deinterleaver_sptr"""
    return _isdbt_swig.byte_deinterleaver_make()

class byte_deinterleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::byte_deinterleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(byte_deinterleaver_sptr self) -> byte_deinterleaver_sptr
        __init__(byte_deinterleaver_sptr self, byte_deinterleaver p) -> byte_deinterleaver_sptr
        """
        _isdbt_swig.byte_deinterleaver_sptr_swiginit(self, _isdbt_swig.new_byte_deinterleaver_sptr(*args))

    def __deref__(self) -> "gr::isdbt::byte_deinterleaver *":
        r"""__deref__(byte_deinterleaver_sptr self) -> byte_deinterleaver"""
        return _isdbt_swig.byte_deinterleaver_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_byte_deinterleaver_sptr

    def make(self) -> "gr::isdbt::byte_deinterleaver::sptr":
        r"""make(byte_deinterleaver_sptr self) -> byte_deinterleaver_sptr"""
        return _isdbt_swig.byte_deinterleaver_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(byte_deinterleaver_sptr self) -> unsigned int"""
        return _isdbt_swig.byte_deinterleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(byte_deinterleaver_sptr self, int which, int delay)
        declare_sample_delay(byte_deinterleaver_sptr self, unsigned int delay)
        """
        return _isdbt_swig.byte_deinterleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(byte_deinterleaver_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.byte_deinterleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(byte_deinterleaver_sptr self, int multiple)"""
        return _isdbt_swig.byte_deinterleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(byte_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.byte_deinterleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(byte_deinterleaver_sptr self) -> double"""
        return _isdbt_swig.byte_deinterleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(byte_deinterleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.byte_deinterleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(byte_deinterleaver_sptr self) -> uint64_t"""
        return _isdbt_swig.byte_deinterleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(byte_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.byte_deinterleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(byte_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.byte_deinterleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(byte_deinterleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.byte_deinterleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(byte_deinterleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.byte_deinterleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(byte_deinterleaver_sptr self, std::string level)"""
        return _isdbt_swig.byte_deinterleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(byte_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.byte_deinterleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(byte_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.byte_deinterleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(byte_deinterleaver_sptr self, int m)"""
        return _isdbt_swig.byte_deinterleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(byte_deinterleaver_sptr self)"""
        return _isdbt_swig.byte_deinterleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(byte_deinterleaver_sptr self) -> bool"""
        return _isdbt_swig.byte_deinterleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(byte_deinterleaver_sptr self, int m)"""
        return _isdbt_swig.byte_deinterleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(byte_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.byte_deinterleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(byte_deinterleaver_sptr self, int i) -> long"""
        return _isdbt_swig.byte_deinterleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(byte_deinterleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(byte_deinterleaver_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.byte_deinterleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(byte_deinterleaver_sptr self, int i) -> long"""
        return _isdbt_swig.byte_deinterleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(byte_deinterleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(byte_deinterleaver_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.byte_deinterleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(byte_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full(byte_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_deinterleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(byte_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(byte_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_deinterleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(byte_deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(byte_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_deinterleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(byte_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full(byte_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_deinterleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(byte_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(byte_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_deinterleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(byte_deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(byte_deinterleaver_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.byte_deinterleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(byte_deinterleaver_sptr self) -> float"""
        return _isdbt_swig.byte_deinterleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(byte_deinterleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.byte_deinterleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(byte_deinterleaver_sptr self)"""
        return _isdbt_swig.byte_deinterleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(byte_deinterleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.byte_deinterleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(byte_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.byte_deinterleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(byte_deinterleaver_sptr self) -> int"""
        return _isdbt_swig.byte_deinterleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(byte_deinterleaver_sptr self, int priority) -> int"""
        return _isdbt_swig.byte_deinterleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(byte_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.byte_deinterleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(byte_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.byte_deinterleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(byte_deinterleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.byte_deinterleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(byte_deinterleaver_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.byte_deinterleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(byte_deinterleaver_sptr self) -> long"""
        return _isdbt_swig.byte_deinterleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(byte_deinterleaver_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.byte_deinterleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(byte_deinterleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.byte_deinterleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(byte_deinterleaver_sptr self) -> std::string"""
        return _isdbt_swig.byte_deinterleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(byte_deinterleaver_sptr self, std::string name)"""
        return _isdbt_swig.byte_deinterleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(byte_deinterleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.byte_deinterleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(byte_deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.byte_deinterleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(byte_deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.byte_deinterleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(byte_deinterleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.byte_deinterleaver_sptr_message_subscribers(self, which_port)

# Register byte_deinterleaver_sptr in _isdbt_swig:
_isdbt_swig.byte_deinterleaver_sptr_swigregister(byte_deinterleaver_sptr)


byte_deinterleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
byte_deinterleaver = byte_deinterleaver.make;

class energy_descrambler(object):
    r"""Proxy of C++ gr::isdbt::energy_descrambler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::isdbt::energy_descrambler::sptr":
        r"""make() -> energy_descrambler_sptr"""
        return _isdbt_swig.energy_descrambler_make()
    __swig_destroy__ = _isdbt_swig.delete_energy_descrambler

# Register energy_descrambler in _isdbt_swig:
_isdbt_swig.energy_descrambler_swigregister(energy_descrambler)

def energy_descrambler_make() -> "gr::isdbt::energy_descrambler::sptr":
    r"""energy_descrambler_make() -> energy_descrambler_sptr"""
    return _isdbt_swig.energy_descrambler_make()

class energy_descrambler_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::energy_descrambler > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(energy_descrambler_sptr self) -> energy_descrambler_sptr
        __init__(energy_descrambler_sptr self, energy_descrambler p) -> energy_descrambler_sptr
        """
        _isdbt_swig.energy_descrambler_sptr_swiginit(self, _isdbt_swig.new_energy_descrambler_sptr(*args))

    def __deref__(self) -> "gr::isdbt::energy_descrambler *":
        r"""__deref__(energy_descrambler_sptr self) -> energy_descrambler"""
        return _isdbt_swig.energy_descrambler_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_energy_descrambler_sptr

    def make(self) -> "gr::isdbt::energy_descrambler::sptr":
        r"""make(energy_descrambler_sptr self) -> energy_descrambler_sptr"""
        return _isdbt_swig.energy_descrambler_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(energy_descrambler_sptr self) -> unsigned int"""
        return _isdbt_swig.energy_descrambler_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(energy_descrambler_sptr self, int which, int delay)
        declare_sample_delay(energy_descrambler_sptr self, unsigned int delay)
        """
        return _isdbt_swig.energy_descrambler_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(energy_descrambler_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.energy_descrambler_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(energy_descrambler_sptr self, int multiple)"""
        return _isdbt_swig.energy_descrambler_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(energy_descrambler_sptr self) -> int"""
        return _isdbt_swig.energy_descrambler_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(energy_descrambler_sptr self) -> double"""
        return _isdbt_swig.energy_descrambler_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(energy_descrambler_sptr self) -> uint64_t"""
        return _isdbt_swig.energy_descrambler_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(energy_descrambler_sptr self) -> uint64_t"""
        return _isdbt_swig.energy_descrambler_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(energy_descrambler_sptr self) -> bool"""
        return _isdbt_swig.energy_descrambler_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(energy_descrambler_sptr self) -> bool"""
        return _isdbt_swig.energy_descrambler_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(energy_descrambler_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.energy_descrambler_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(energy_descrambler_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.energy_descrambler_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(energy_descrambler_sptr self, std::string level)"""
        return _isdbt_swig.energy_descrambler_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(energy_descrambler_sptr self) -> std::string"""
        return _isdbt_swig.energy_descrambler_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(energy_descrambler_sptr self) -> int"""
        return _isdbt_swig.energy_descrambler_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(energy_descrambler_sptr self, int m)"""
        return _isdbt_swig.energy_descrambler_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(energy_descrambler_sptr self)"""
        return _isdbt_swig.energy_descrambler_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(energy_descrambler_sptr self) -> bool"""
        return _isdbt_swig.energy_descrambler_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(energy_descrambler_sptr self, int m)"""
        return _isdbt_swig.energy_descrambler_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(energy_descrambler_sptr self) -> int"""
        return _isdbt_swig.energy_descrambler_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(energy_descrambler_sptr self, int i) -> long"""
        return _isdbt_swig.energy_descrambler_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(energy_descrambler_sptr self, long max_output_buffer)
        set_max_output_buffer(energy_descrambler_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.energy_descrambler_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(energy_descrambler_sptr self, int i) -> long"""
        return _isdbt_swig.energy_descrambler_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(energy_descrambler_sptr self, long min_output_buffer)
        set_min_output_buffer(energy_descrambler_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.energy_descrambler_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(energy_descrambler_sptr self, int which) -> float
        pc_input_buffers_full(energy_descrambler_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_descrambler_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(energy_descrambler_sptr self, int which) -> float
        pc_input_buffers_full_avg(energy_descrambler_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_descrambler_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(energy_descrambler_sptr self, int which) -> float
        pc_input_buffers_full_var(energy_descrambler_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_descrambler_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(energy_descrambler_sptr self, int which) -> float
        pc_output_buffers_full(energy_descrambler_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_descrambler_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(energy_descrambler_sptr self, int which) -> float
        pc_output_buffers_full_avg(energy_descrambler_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_descrambler_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(energy_descrambler_sptr self, int which) -> float
        pc_output_buffers_full_var(energy_descrambler_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.energy_descrambler_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(energy_descrambler_sptr self) -> float"""
        return _isdbt_swig.energy_descrambler_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(energy_descrambler_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.energy_descrambler_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(energy_descrambler_sptr self)"""
        return _isdbt_swig.energy_descrambler_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(energy_descrambler_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.energy_descrambler_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(energy_descrambler_sptr self) -> int"""
        return _isdbt_swig.energy_descrambler_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(energy_descrambler_sptr self) -> int"""
        return _isdbt_swig.energy_descrambler_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(energy_descrambler_sptr self, int priority) -> int"""
        return _isdbt_swig.energy_descrambler_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(energy_descrambler_sptr self) -> std::string"""
        return _isdbt_swig.energy_descrambler_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(energy_descrambler_sptr self) -> std::string"""
        return _isdbt_swig.energy_descrambler_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(energy_descrambler_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.energy_descrambler_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(energy_descrambler_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.energy_descrambler_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(energy_descrambler_sptr self) -> long"""
        return _isdbt_swig.energy_descrambler_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(energy_descrambler_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.energy_descrambler_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(energy_descrambler_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.energy_descrambler_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(energy_descrambler_sptr self) -> std::string"""
        return _isdbt_swig.energy_descrambler_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(energy_descrambler_sptr self, std::string name)"""
        return _isdbt_swig.energy_descrambler_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(energy_descrambler_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.energy_descrambler_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(energy_descrambler_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.energy_descrambler_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(energy_descrambler_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.energy_descrambler_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(energy_descrambler_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.energy_descrambler_sptr_message_subscribers(self, which_port)

# Register energy_descrambler_sptr in _isdbt_swig:
_isdbt_swig.energy_descrambler_sptr_swigregister(energy_descrambler_sptr)


energy_descrambler_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
energy_descrambler = energy_descrambler.make;

class pilot_signals(object):
    r"""Proxy of C++ gr::isdbt::pilot_signals class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int") -> "gr::isdbt::pilot_signals::sptr":
        r"""make(int mode) -> pilot_signals_sptr"""
        return _isdbt_swig.pilot_signals_make(mode)
    __swig_destroy__ = _isdbt_swig.delete_pilot_signals

# Register pilot_signals in _isdbt_swig:
_isdbt_swig.pilot_signals_swigregister(pilot_signals)

def pilot_signals_make(mode: "int") -> "gr::isdbt::pilot_signals::sptr":
    r"""pilot_signals_make(int mode) -> pilot_signals_sptr"""
    return _isdbt_swig.pilot_signals_make(mode)

class pilot_signals_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::pilot_signals > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(pilot_signals_sptr self) -> pilot_signals_sptr
        __init__(pilot_signals_sptr self, pilot_signals p) -> pilot_signals_sptr
        """
        _isdbt_swig.pilot_signals_sptr_swiginit(self, _isdbt_swig.new_pilot_signals_sptr(*args))

    def __deref__(self) -> "gr::isdbt::pilot_signals *":
        r"""__deref__(pilot_signals_sptr self) -> pilot_signals"""
        return _isdbt_swig.pilot_signals_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_pilot_signals_sptr

    def make(self, mode: "int") -> "gr::isdbt::pilot_signals::sptr":
        r"""make(pilot_signals_sptr self, int mode) -> pilot_signals_sptr"""
        return _isdbt_swig.pilot_signals_sptr_make(self, mode)

    def history(self) -> "unsigned int":
        r"""history(pilot_signals_sptr self) -> unsigned int"""
        return _isdbt_swig.pilot_signals_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(pilot_signals_sptr self, int which, int delay)
        declare_sample_delay(pilot_signals_sptr self, unsigned int delay)
        """
        return _isdbt_swig.pilot_signals_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(pilot_signals_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.pilot_signals_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(pilot_signals_sptr self, int multiple)"""
        return _isdbt_swig.pilot_signals_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(pilot_signals_sptr self) -> int"""
        return _isdbt_swig.pilot_signals_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(pilot_signals_sptr self) -> double"""
        return _isdbt_swig.pilot_signals_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(pilot_signals_sptr self) -> uint64_t"""
        return _isdbt_swig.pilot_signals_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(pilot_signals_sptr self) -> uint64_t"""
        return _isdbt_swig.pilot_signals_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(pilot_signals_sptr self) -> bool"""
        return _isdbt_swig.pilot_signals_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(pilot_signals_sptr self) -> bool"""
        return _isdbt_swig.pilot_signals_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(pilot_signals_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.pilot_signals_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(pilot_signals_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.pilot_signals_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(pilot_signals_sptr self, std::string level)"""
        return _isdbt_swig.pilot_signals_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(pilot_signals_sptr self) -> std::string"""
        return _isdbt_swig.pilot_signals_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(pilot_signals_sptr self) -> int"""
        return _isdbt_swig.pilot_signals_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(pilot_signals_sptr self, int m)"""
        return _isdbt_swig.pilot_signals_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(pilot_signals_sptr self)"""
        return _isdbt_swig.pilot_signals_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(pilot_signals_sptr self) -> bool"""
        return _isdbt_swig.pilot_signals_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(pilot_signals_sptr self, int m)"""
        return _isdbt_swig.pilot_signals_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(pilot_signals_sptr self) -> int"""
        return _isdbt_swig.pilot_signals_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(pilot_signals_sptr self, int i) -> long"""
        return _isdbt_swig.pilot_signals_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(pilot_signals_sptr self, long max_output_buffer)
        set_max_output_buffer(pilot_signals_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.pilot_signals_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(pilot_signals_sptr self, int i) -> long"""
        return _isdbt_swig.pilot_signals_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(pilot_signals_sptr self, long min_output_buffer)
        set_min_output_buffer(pilot_signals_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.pilot_signals_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(pilot_signals_sptr self, int which) -> float
        pc_input_buffers_full(pilot_signals_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.pilot_signals_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(pilot_signals_sptr self, int which) -> float
        pc_input_buffers_full_avg(pilot_signals_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.pilot_signals_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(pilot_signals_sptr self, int which) -> float
        pc_input_buffers_full_var(pilot_signals_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.pilot_signals_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(pilot_signals_sptr self, int which) -> float
        pc_output_buffers_full(pilot_signals_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.pilot_signals_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(pilot_signals_sptr self, int which) -> float
        pc_output_buffers_full_avg(pilot_signals_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.pilot_signals_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(pilot_signals_sptr self, int which) -> float
        pc_output_buffers_full_var(pilot_signals_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.pilot_signals_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(pilot_signals_sptr self) -> float"""
        return _isdbt_swig.pilot_signals_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(pilot_signals_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.pilot_signals_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(pilot_signals_sptr self)"""
        return _isdbt_swig.pilot_signals_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(pilot_signals_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.pilot_signals_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(pilot_signals_sptr self) -> int"""
        return _isdbt_swig.pilot_signals_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(pilot_signals_sptr self) -> int"""
        return _isdbt_swig.pilot_signals_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(pilot_signals_sptr self, int priority) -> int"""
        return _isdbt_swig.pilot_signals_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(pilot_signals_sptr self) -> std::string"""
        return _isdbt_swig.pilot_signals_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(pilot_signals_sptr self) -> std::string"""
        return _isdbt_swig.pilot_signals_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(pilot_signals_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.pilot_signals_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(pilot_signals_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.pilot_signals_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(pilot_signals_sptr self) -> long"""
        return _isdbt_swig.pilot_signals_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(pilot_signals_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.pilot_signals_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(pilot_signals_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.pilot_signals_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(pilot_signals_sptr self) -> std::string"""
        return _isdbt_swig.pilot_signals_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(pilot_signals_sptr self, std::string name)"""
        return _isdbt_swig.pilot_signals_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(pilot_signals_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.pilot_signals_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(pilot_signals_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.pilot_signals_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(pilot_signals_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.pilot_signals_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(pilot_signals_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.pilot_signals_sptr_message_subscribers(self, which_port)

# Register pilot_signals_sptr in _isdbt_swig:
_isdbt_swig.pilot_signals_sptr_swigregister(pilot_signals_sptr)


pilot_signals_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pilot_signals = pilot_signals.make;

class tmcc_encoder(object):
    r"""Proxy of C++ gr::isdbt::tmcc_encoder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", one_seg_present: "bool", mod_scheme_A: "int", mod_scheme_B: "int", mod_scheme_C: "int", conv_code_A: "int", conv_code_B: "int", conv_code_C: "int", int_length_A: "int", int_length_B: "int", int_length_C: "int", nsegs_A: "int", nsegs_B: "int", nsegs_C: "int") -> "gr::isdbt::tmcc_encoder::sptr":
        r"""make(int mode, bool one_seg_present, int mod_scheme_A, int mod_scheme_B, int mod_scheme_C, int conv_code_A, int conv_code_B, int conv_code_C, int int_length_A, int int_length_B, int int_length_C, int nsegs_A, int nsegs_B, int nsegs_C) -> tmcc_encoder_sptr"""
        return _isdbt_swig.tmcc_encoder_make(mode, one_seg_present, mod_scheme_A, mod_scheme_B, mod_scheme_C, conv_code_A, conv_code_B, conv_code_C, int_length_A, int_length_B, int_length_C, nsegs_A, nsegs_B, nsegs_C)
    __swig_destroy__ = _isdbt_swig.delete_tmcc_encoder

# Register tmcc_encoder in _isdbt_swig:
_isdbt_swig.tmcc_encoder_swigregister(tmcc_encoder)

def tmcc_encoder_make(mode: "int", one_seg_present: "bool", mod_scheme_A: "int", mod_scheme_B: "int", mod_scheme_C: "int", conv_code_A: "int", conv_code_B: "int", conv_code_C: "int", int_length_A: "int", int_length_B: "int", int_length_C: "int", nsegs_A: "int", nsegs_B: "int", nsegs_C: "int") -> "gr::isdbt::tmcc_encoder::sptr":
    r"""tmcc_encoder_make(int mode, bool one_seg_present, int mod_scheme_A, int mod_scheme_B, int mod_scheme_C, int conv_code_A, int conv_code_B, int conv_code_C, int int_length_A, int int_length_B, int int_length_C, int nsegs_A, int nsegs_B, int nsegs_C) -> tmcc_encoder_sptr"""
    return _isdbt_swig.tmcc_encoder_make(mode, one_seg_present, mod_scheme_A, mod_scheme_B, mod_scheme_C, conv_code_A, conv_code_B, conv_code_C, int_length_A, int_length_B, int_length_C, nsegs_A, nsegs_B, nsegs_C)

class tmcc_encoder_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::tmcc_encoder > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(tmcc_encoder_sptr self) -> tmcc_encoder_sptr
        __init__(tmcc_encoder_sptr self, tmcc_encoder p) -> tmcc_encoder_sptr
        """
        _isdbt_swig.tmcc_encoder_sptr_swiginit(self, _isdbt_swig.new_tmcc_encoder_sptr(*args))

    def __deref__(self) -> "gr::isdbt::tmcc_encoder *":
        r"""__deref__(tmcc_encoder_sptr self) -> tmcc_encoder"""
        return _isdbt_swig.tmcc_encoder_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_tmcc_encoder_sptr

    def make(self, mode: "int", one_seg_present: "bool", mod_scheme_A: "int", mod_scheme_B: "int", mod_scheme_C: "int", conv_code_A: "int", conv_code_B: "int", conv_code_C: "int", int_length_A: "int", int_length_B: "int", int_length_C: "int", nsegs_A: "int", nsegs_B: "int", nsegs_C: "int") -> "gr::isdbt::tmcc_encoder::sptr":
        r"""make(tmcc_encoder_sptr self, int mode, bool one_seg_present, int mod_scheme_A, int mod_scheme_B, int mod_scheme_C, int conv_code_A, int conv_code_B, int conv_code_C, int int_length_A, int int_length_B, int int_length_C, int nsegs_A, int nsegs_B, int nsegs_C) -> tmcc_encoder_sptr"""
        return _isdbt_swig.tmcc_encoder_sptr_make(self, mode, one_seg_present, mod_scheme_A, mod_scheme_B, mod_scheme_C, conv_code_A, conv_code_B, conv_code_C, int_length_A, int_length_B, int_length_C, nsegs_A, nsegs_B, nsegs_C)

    def history(self) -> "unsigned int":
        r"""history(tmcc_encoder_sptr self) -> unsigned int"""
        return _isdbt_swig.tmcc_encoder_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(tmcc_encoder_sptr self, int which, int delay)
        declare_sample_delay(tmcc_encoder_sptr self, unsigned int delay)
        """
        return _isdbt_swig.tmcc_encoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(tmcc_encoder_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.tmcc_encoder_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(tmcc_encoder_sptr self, int multiple)"""
        return _isdbt_swig.tmcc_encoder_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(tmcc_encoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_encoder_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(tmcc_encoder_sptr self) -> double"""
        return _isdbt_swig.tmcc_encoder_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(tmcc_encoder_sptr self) -> uint64_t"""
        return _isdbt_swig.tmcc_encoder_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(tmcc_encoder_sptr self) -> uint64_t"""
        return _isdbt_swig.tmcc_encoder_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(tmcc_encoder_sptr self) -> bool"""
        return _isdbt_swig.tmcc_encoder_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(tmcc_encoder_sptr self) -> bool"""
        return _isdbt_swig.tmcc_encoder_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(tmcc_encoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.tmcc_encoder_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(tmcc_encoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.tmcc_encoder_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(tmcc_encoder_sptr self, std::string level)"""
        return _isdbt_swig.tmcc_encoder_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(tmcc_encoder_sptr self) -> std::string"""
        return _isdbt_swig.tmcc_encoder_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(tmcc_encoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_encoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(tmcc_encoder_sptr self, int m)"""
        return _isdbt_swig.tmcc_encoder_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(tmcc_encoder_sptr self)"""
        return _isdbt_swig.tmcc_encoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(tmcc_encoder_sptr self) -> bool"""
        return _isdbt_swig.tmcc_encoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(tmcc_encoder_sptr self, int m)"""
        return _isdbt_swig.tmcc_encoder_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(tmcc_encoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_encoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(tmcc_encoder_sptr self, int i) -> long"""
        return _isdbt_swig.tmcc_encoder_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(tmcc_encoder_sptr self, long max_output_buffer)
        set_max_output_buffer(tmcc_encoder_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.tmcc_encoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(tmcc_encoder_sptr self, int i) -> long"""
        return _isdbt_swig.tmcc_encoder_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(tmcc_encoder_sptr self, long min_output_buffer)
        set_min_output_buffer(tmcc_encoder_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.tmcc_encoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(tmcc_encoder_sptr self, int which) -> float
        pc_input_buffers_full(tmcc_encoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_encoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(tmcc_encoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(tmcc_encoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_encoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(tmcc_encoder_sptr self, int which) -> float
        pc_input_buffers_full_var(tmcc_encoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_encoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(tmcc_encoder_sptr self, int which) -> float
        pc_output_buffers_full(tmcc_encoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_encoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(tmcc_encoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(tmcc_encoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_encoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(tmcc_encoder_sptr self, int which) -> float
        pc_output_buffers_full_var(tmcc_encoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_encoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(tmcc_encoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_encoder_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(tmcc_encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.tmcc_encoder_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(tmcc_encoder_sptr self)"""
        return _isdbt_swig.tmcc_encoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(tmcc_encoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.tmcc_encoder_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(tmcc_encoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_encoder_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(tmcc_encoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_encoder_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(tmcc_encoder_sptr self, int priority) -> int"""
        return _isdbt_swig.tmcc_encoder_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(tmcc_encoder_sptr self) -> std::string"""
        return _isdbt_swig.tmcc_encoder_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(tmcc_encoder_sptr self) -> std::string"""
        return _isdbt_swig.tmcc_encoder_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(tmcc_encoder_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.tmcc_encoder_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(tmcc_encoder_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.tmcc_encoder_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(tmcc_encoder_sptr self) -> long"""
        return _isdbt_swig.tmcc_encoder_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(tmcc_encoder_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.tmcc_encoder_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(tmcc_encoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.tmcc_encoder_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(tmcc_encoder_sptr self) -> std::string"""
        return _isdbt_swig.tmcc_encoder_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(tmcc_encoder_sptr self, std::string name)"""
        return _isdbt_swig.tmcc_encoder_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(tmcc_encoder_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.tmcc_encoder_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(tmcc_encoder_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.tmcc_encoder_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(tmcc_encoder_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.tmcc_encoder_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(tmcc_encoder_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.tmcc_encoder_sptr_message_subscribers(self, which_port)

# Register tmcc_encoder_sptr in _isdbt_swig:
_isdbt_swig.tmcc_encoder_sptr_swigregister(tmcc_encoder_sptr)


tmcc_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tmcc_encoder = tmcc_encoder.make;

class ofdm_synchronization(object):
    r"""Proxy of C++ gr::isdbt::ofdm_synchronization class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", cp_length: "float", interpolate: "bool") -> "gr::isdbt::ofdm_synchronization::sptr":
        r"""make(int mode, float cp_length, bool interpolate) -> ofdm_synchronization_sptr"""
        return _isdbt_swig.ofdm_synchronization_make(mode, cp_length, interpolate)
    __swig_destroy__ = _isdbt_swig.delete_ofdm_synchronization

# Register ofdm_synchronization in _isdbt_swig:
_isdbt_swig.ofdm_synchronization_swigregister(ofdm_synchronization)

def ofdm_synchronization_make(mode: "int", cp_length: "float", interpolate: "bool") -> "gr::isdbt::ofdm_synchronization::sptr":
    r"""ofdm_synchronization_make(int mode, float cp_length, bool interpolate) -> ofdm_synchronization_sptr"""
    return _isdbt_swig.ofdm_synchronization_make(mode, cp_length, interpolate)

class ofdm_synchronization_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::ofdm_synchronization > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ofdm_synchronization_sptr self) -> ofdm_synchronization_sptr
        __init__(ofdm_synchronization_sptr self, ofdm_synchronization p) -> ofdm_synchronization_sptr
        """
        _isdbt_swig.ofdm_synchronization_sptr_swiginit(self, _isdbt_swig.new_ofdm_synchronization_sptr(*args))

    def __deref__(self) -> "gr::isdbt::ofdm_synchronization *":
        r"""__deref__(ofdm_synchronization_sptr self) -> ofdm_synchronization"""
        return _isdbt_swig.ofdm_synchronization_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_ofdm_synchronization_sptr

    def make(self, mode: "int", cp_length: "float", interpolate: "bool") -> "gr::isdbt::ofdm_synchronization::sptr":
        r"""make(ofdm_synchronization_sptr self, int mode, float cp_length, bool interpolate) -> ofdm_synchronization_sptr"""
        return _isdbt_swig.ofdm_synchronization_sptr_make(self, mode, cp_length, interpolate)

    def history(self) -> "unsigned int":
        r"""history(ofdm_synchronization_sptr self) -> unsigned int"""
        return _isdbt_swig.ofdm_synchronization_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(ofdm_synchronization_sptr self, int which, int delay)
        declare_sample_delay(ofdm_synchronization_sptr self, unsigned int delay)
        """
        return _isdbt_swig.ofdm_synchronization_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(ofdm_synchronization_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.ofdm_synchronization_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(ofdm_synchronization_sptr self, int multiple)"""
        return _isdbt_swig.ofdm_synchronization_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(ofdm_synchronization_sptr self) -> int"""
        return _isdbt_swig.ofdm_synchronization_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(ofdm_synchronization_sptr self) -> double"""
        return _isdbt_swig.ofdm_synchronization_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(ofdm_synchronization_sptr self) -> uint64_t"""
        return _isdbt_swig.ofdm_synchronization_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(ofdm_synchronization_sptr self) -> uint64_t"""
        return _isdbt_swig.ofdm_synchronization_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(ofdm_synchronization_sptr self) -> bool"""
        return _isdbt_swig.ofdm_synchronization_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(ofdm_synchronization_sptr self) -> bool"""
        return _isdbt_swig.ofdm_synchronization_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(ofdm_synchronization_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.ofdm_synchronization_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(ofdm_synchronization_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.ofdm_synchronization_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(ofdm_synchronization_sptr self, std::string level)"""
        return _isdbt_swig.ofdm_synchronization_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(ofdm_synchronization_sptr self) -> std::string"""
        return _isdbt_swig.ofdm_synchronization_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(ofdm_synchronization_sptr self) -> int"""
        return _isdbt_swig.ofdm_synchronization_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(ofdm_synchronization_sptr self, int m)"""
        return _isdbt_swig.ofdm_synchronization_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(ofdm_synchronization_sptr self)"""
        return _isdbt_swig.ofdm_synchronization_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(ofdm_synchronization_sptr self) -> bool"""
        return _isdbt_swig.ofdm_synchronization_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(ofdm_synchronization_sptr self, int m)"""
        return _isdbt_swig.ofdm_synchronization_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(ofdm_synchronization_sptr self) -> int"""
        return _isdbt_swig.ofdm_synchronization_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(ofdm_synchronization_sptr self, int i) -> long"""
        return _isdbt_swig.ofdm_synchronization_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(ofdm_synchronization_sptr self, long max_output_buffer)
        set_max_output_buffer(ofdm_synchronization_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.ofdm_synchronization_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(ofdm_synchronization_sptr self, int i) -> long"""
        return _isdbt_swig.ofdm_synchronization_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(ofdm_synchronization_sptr self, long min_output_buffer)
        set_min_output_buffer(ofdm_synchronization_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.ofdm_synchronization_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(ofdm_synchronization_sptr self, int which) -> float
        pc_input_buffers_full(ofdm_synchronization_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.ofdm_synchronization_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(ofdm_synchronization_sptr self, int which) -> float
        pc_input_buffers_full_avg(ofdm_synchronization_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.ofdm_synchronization_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(ofdm_synchronization_sptr self, int which) -> float
        pc_input_buffers_full_var(ofdm_synchronization_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.ofdm_synchronization_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(ofdm_synchronization_sptr self, int which) -> float
        pc_output_buffers_full(ofdm_synchronization_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.ofdm_synchronization_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(ofdm_synchronization_sptr self, int which) -> float
        pc_output_buffers_full_avg(ofdm_synchronization_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.ofdm_synchronization_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(ofdm_synchronization_sptr self, int which) -> float
        pc_output_buffers_full_var(ofdm_synchronization_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.ofdm_synchronization_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(ofdm_synchronization_sptr self) -> float"""
        return _isdbt_swig.ofdm_synchronization_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(ofdm_synchronization_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.ofdm_synchronization_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(ofdm_synchronization_sptr self)"""
        return _isdbt_swig.ofdm_synchronization_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(ofdm_synchronization_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.ofdm_synchronization_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(ofdm_synchronization_sptr self) -> int"""
        return _isdbt_swig.ofdm_synchronization_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(ofdm_synchronization_sptr self) -> int"""
        return _isdbt_swig.ofdm_synchronization_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(ofdm_synchronization_sptr self, int priority) -> int"""
        return _isdbt_swig.ofdm_synchronization_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(ofdm_synchronization_sptr self) -> std::string"""
        return _isdbt_swig.ofdm_synchronization_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(ofdm_synchronization_sptr self) -> std::string"""
        return _isdbt_swig.ofdm_synchronization_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(ofdm_synchronization_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.ofdm_synchronization_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(ofdm_synchronization_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.ofdm_synchronization_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(ofdm_synchronization_sptr self) -> long"""
        return _isdbt_swig.ofdm_synchronization_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(ofdm_synchronization_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.ofdm_synchronization_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(ofdm_synchronization_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.ofdm_synchronization_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(ofdm_synchronization_sptr self) -> std::string"""
        return _isdbt_swig.ofdm_synchronization_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(ofdm_synchronization_sptr self, std::string name)"""
        return _isdbt_swig.ofdm_synchronization_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(ofdm_synchronization_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.ofdm_synchronization_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(ofdm_synchronization_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.ofdm_synchronization_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(ofdm_synchronization_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.ofdm_synchronization_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(ofdm_synchronization_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.ofdm_synchronization_sptr_message_subscribers(self, which_port)

# Register ofdm_synchronization_sptr in _isdbt_swig:
_isdbt_swig.ofdm_synchronization_sptr_swigregister(ofdm_synchronization_sptr)


ofdm_synchronization_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ofdm_synchronization = ofdm_synchronization.make;

class tmcc_decoder(object):
    r"""Proxy of C++ gr::isdbt::tmcc_decoder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(mode: "int", print_params: "bool") -> "gr::isdbt::tmcc_decoder::sptr":
        r"""make(int mode, bool print_params) -> tmcc_decoder_sptr"""
        return _isdbt_swig.tmcc_decoder_make(mode, print_params)
    __swig_destroy__ = _isdbt_swig.delete_tmcc_decoder

# Register tmcc_decoder in _isdbt_swig:
_isdbt_swig.tmcc_decoder_swigregister(tmcc_decoder)

def tmcc_decoder_make(mode: "int", print_params: "bool") -> "gr::isdbt::tmcc_decoder::sptr":
    r"""tmcc_decoder_make(int mode, bool print_params) -> tmcc_decoder_sptr"""
    return _isdbt_swig.tmcc_decoder_make(mode, print_params)

class tmcc_decoder_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::tmcc_decoder > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(tmcc_decoder_sptr self) -> tmcc_decoder_sptr
        __init__(tmcc_decoder_sptr self, tmcc_decoder p) -> tmcc_decoder_sptr
        """
        _isdbt_swig.tmcc_decoder_sptr_swiginit(self, _isdbt_swig.new_tmcc_decoder_sptr(*args))

    def __deref__(self) -> "gr::isdbt::tmcc_decoder *":
        r"""__deref__(tmcc_decoder_sptr self) -> tmcc_decoder"""
        return _isdbt_swig.tmcc_decoder_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_tmcc_decoder_sptr

    def make(self, mode: "int", print_params: "bool") -> "gr::isdbt::tmcc_decoder::sptr":
        r"""make(tmcc_decoder_sptr self, int mode, bool print_params) -> tmcc_decoder_sptr"""
        return _isdbt_swig.tmcc_decoder_sptr_make(self, mode, print_params)

    def history(self) -> "unsigned int":
        r"""history(tmcc_decoder_sptr self) -> unsigned int"""
        return _isdbt_swig.tmcc_decoder_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(tmcc_decoder_sptr self, int which, int delay)
        declare_sample_delay(tmcc_decoder_sptr self, unsigned int delay)
        """
        return _isdbt_swig.tmcc_decoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(tmcc_decoder_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.tmcc_decoder_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(tmcc_decoder_sptr self, int multiple)"""
        return _isdbt_swig.tmcc_decoder_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(tmcc_decoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_decoder_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(tmcc_decoder_sptr self) -> double"""
        return _isdbt_swig.tmcc_decoder_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(tmcc_decoder_sptr self) -> uint64_t"""
        return _isdbt_swig.tmcc_decoder_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(tmcc_decoder_sptr self) -> uint64_t"""
        return _isdbt_swig.tmcc_decoder_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(tmcc_decoder_sptr self) -> bool"""
        return _isdbt_swig.tmcc_decoder_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(tmcc_decoder_sptr self) -> bool"""
        return _isdbt_swig.tmcc_decoder_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(tmcc_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.tmcc_decoder_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(tmcc_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.tmcc_decoder_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(tmcc_decoder_sptr self, std::string level)"""
        return _isdbt_swig.tmcc_decoder_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(tmcc_decoder_sptr self) -> std::string"""
        return _isdbt_swig.tmcc_decoder_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(tmcc_decoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_decoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(tmcc_decoder_sptr self, int m)"""
        return _isdbt_swig.tmcc_decoder_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(tmcc_decoder_sptr self)"""
        return _isdbt_swig.tmcc_decoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(tmcc_decoder_sptr self) -> bool"""
        return _isdbt_swig.tmcc_decoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(tmcc_decoder_sptr self, int m)"""
        return _isdbt_swig.tmcc_decoder_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(tmcc_decoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_decoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(tmcc_decoder_sptr self, int i) -> long"""
        return _isdbt_swig.tmcc_decoder_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(tmcc_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(tmcc_decoder_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.tmcc_decoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(tmcc_decoder_sptr self, int i) -> long"""
        return _isdbt_swig.tmcc_decoder_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(tmcc_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(tmcc_decoder_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.tmcc_decoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(tmcc_decoder_sptr self, int which) -> float
        pc_input_buffers_full(tmcc_decoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_decoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(tmcc_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(tmcc_decoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_decoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(tmcc_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(tmcc_decoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_decoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(tmcc_decoder_sptr self, int which) -> float
        pc_output_buffers_full(tmcc_decoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_decoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(tmcc_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(tmcc_decoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_decoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(tmcc_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(tmcc_decoder_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.tmcc_decoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(tmcc_decoder_sptr self) -> float"""
        return _isdbt_swig.tmcc_decoder_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(tmcc_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.tmcc_decoder_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(tmcc_decoder_sptr self)"""
        return _isdbt_swig.tmcc_decoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(tmcc_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.tmcc_decoder_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(tmcc_decoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_decoder_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(tmcc_decoder_sptr self) -> int"""
        return _isdbt_swig.tmcc_decoder_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(tmcc_decoder_sptr self, int priority) -> int"""
        return _isdbt_swig.tmcc_decoder_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(tmcc_decoder_sptr self) -> std::string"""
        return _isdbt_swig.tmcc_decoder_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(tmcc_decoder_sptr self) -> std::string"""
        return _isdbt_swig.tmcc_decoder_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(tmcc_decoder_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.tmcc_decoder_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(tmcc_decoder_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.tmcc_decoder_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(tmcc_decoder_sptr self) -> long"""
        return _isdbt_swig.tmcc_decoder_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(tmcc_decoder_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.tmcc_decoder_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(tmcc_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.tmcc_decoder_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(tmcc_decoder_sptr self) -> std::string"""
        return _isdbt_swig.tmcc_decoder_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(tmcc_decoder_sptr self, std::string name)"""
        return _isdbt_swig.tmcc_decoder_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(tmcc_decoder_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.tmcc_decoder_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(tmcc_decoder_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.tmcc_decoder_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(tmcc_decoder_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.tmcc_decoder_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(tmcc_decoder_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.tmcc_decoder_sptr_message_subscribers(self, which_port)

# Register tmcc_decoder_sptr in _isdbt_swig:
_isdbt_swig.tmcc_decoder_sptr_swigregister(tmcc_decoder_sptr)


tmcc_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tmcc_decoder = tmcc_decoder.make;

class subset_of_carriers(object):
    r"""Proxy of C++ gr::isdbt::subset_of_carriers class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(total: "int", first: "int", last: "int") -> "gr::isdbt::subset_of_carriers::sptr":
        r"""make(int total, int first, int last) -> subset_of_carriers_sptr"""
        return _isdbt_swig.subset_of_carriers_make(total, first, last)
    __swig_destroy__ = _isdbt_swig.delete_subset_of_carriers

# Register subset_of_carriers in _isdbt_swig:
_isdbt_swig.subset_of_carriers_swigregister(subset_of_carriers)

def subset_of_carriers_make(total: "int", first: "int", last: "int") -> "gr::isdbt::subset_of_carriers::sptr":
    r"""subset_of_carriers_make(int total, int first, int last) -> subset_of_carriers_sptr"""
    return _isdbt_swig.subset_of_carriers_make(total, first, last)

class subset_of_carriers_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::isdbt::subset_of_carriers > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(subset_of_carriers_sptr self) -> subset_of_carriers_sptr
        __init__(subset_of_carriers_sptr self, subset_of_carriers p) -> subset_of_carriers_sptr
        """
        _isdbt_swig.subset_of_carriers_sptr_swiginit(self, _isdbt_swig.new_subset_of_carriers_sptr(*args))

    def __deref__(self) -> "gr::isdbt::subset_of_carriers *":
        r"""__deref__(subset_of_carriers_sptr self) -> subset_of_carriers"""
        return _isdbt_swig.subset_of_carriers_sptr___deref__(self)
    __swig_destroy__ = _isdbt_swig.delete_subset_of_carriers_sptr

    def make(self, total: "int", first: "int", last: "int") -> "gr::isdbt::subset_of_carriers::sptr":
        r"""make(subset_of_carriers_sptr self, int total, int first, int last) -> subset_of_carriers_sptr"""
        return _isdbt_swig.subset_of_carriers_sptr_make(self, total, first, last)

    def history(self) -> "unsigned int":
        r"""history(subset_of_carriers_sptr self) -> unsigned int"""
        return _isdbt_swig.subset_of_carriers_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(subset_of_carriers_sptr self, int which, int delay)
        declare_sample_delay(subset_of_carriers_sptr self, unsigned int delay)
        """
        return _isdbt_swig.subset_of_carriers_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(subset_of_carriers_sptr self, int which) -> unsigned int"""
        return _isdbt_swig.subset_of_carriers_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(subset_of_carriers_sptr self, int multiple)"""
        return _isdbt_swig.subset_of_carriers_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(subset_of_carriers_sptr self) -> int"""
        return _isdbt_swig.subset_of_carriers_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(subset_of_carriers_sptr self) -> double"""
        return _isdbt_swig.subset_of_carriers_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(subset_of_carriers_sptr self) -> uint64_t"""
        return _isdbt_swig.subset_of_carriers_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(subset_of_carriers_sptr self) -> uint64_t"""
        return _isdbt_swig.subset_of_carriers_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(subset_of_carriers_sptr self) -> bool"""
        return _isdbt_swig.subset_of_carriers_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(subset_of_carriers_sptr self) -> bool"""
        return _isdbt_swig.subset_of_carriers_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(subset_of_carriers_sptr self, unsigned int which_input) -> uint64_t"""
        return _isdbt_swig.subset_of_carriers_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(subset_of_carriers_sptr self, unsigned int which_output) -> uint64_t"""
        return _isdbt_swig.subset_of_carriers_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(subset_of_carriers_sptr self, std::string level)"""
        return _isdbt_swig.subset_of_carriers_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(subset_of_carriers_sptr self) -> std::string"""
        return _isdbt_swig.subset_of_carriers_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(subset_of_carriers_sptr self) -> int"""
        return _isdbt_swig.subset_of_carriers_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(subset_of_carriers_sptr self, int m)"""
        return _isdbt_swig.subset_of_carriers_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(subset_of_carriers_sptr self)"""
        return _isdbt_swig.subset_of_carriers_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(subset_of_carriers_sptr self) -> bool"""
        return _isdbt_swig.subset_of_carriers_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(subset_of_carriers_sptr self, int m)"""
        return _isdbt_swig.subset_of_carriers_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(subset_of_carriers_sptr self) -> int"""
        return _isdbt_swig.subset_of_carriers_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(subset_of_carriers_sptr self, int i) -> long"""
        return _isdbt_swig.subset_of_carriers_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(subset_of_carriers_sptr self, long max_output_buffer)
        set_max_output_buffer(subset_of_carriers_sptr self, int port, long max_output_buffer)
        """
        return _isdbt_swig.subset_of_carriers_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(subset_of_carriers_sptr self, int i) -> long"""
        return _isdbt_swig.subset_of_carriers_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(subset_of_carriers_sptr self, long min_output_buffer)
        set_min_output_buffer(subset_of_carriers_sptr self, int port, long min_output_buffer)
        """
        return _isdbt_swig.subset_of_carriers_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(subset_of_carriers_sptr self, int which) -> float
        pc_input_buffers_full(subset_of_carriers_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.subset_of_carriers_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(subset_of_carriers_sptr self, int which) -> float
        pc_input_buffers_full_avg(subset_of_carriers_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.subset_of_carriers_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(subset_of_carriers_sptr self, int which) -> float
        pc_input_buffers_full_var(subset_of_carriers_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.subset_of_carriers_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(subset_of_carriers_sptr self, int which) -> float
        pc_output_buffers_full(subset_of_carriers_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.subset_of_carriers_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(subset_of_carriers_sptr self, int which) -> float
        pc_output_buffers_full_avg(subset_of_carriers_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.subset_of_carriers_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(subset_of_carriers_sptr self, int which) -> float
        pc_output_buffers_full_var(subset_of_carriers_sptr self) -> pmt_vector_float
        """
        return _isdbt_swig.subset_of_carriers_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(subset_of_carriers_sptr self) -> float"""
        return _isdbt_swig.subset_of_carriers_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(subset_of_carriers_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _isdbt_swig.subset_of_carriers_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(subset_of_carriers_sptr self)"""
        return _isdbt_swig.subset_of_carriers_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(subset_of_carriers_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _isdbt_swig.subset_of_carriers_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(subset_of_carriers_sptr self) -> int"""
        return _isdbt_swig.subset_of_carriers_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(subset_of_carriers_sptr self) -> int"""
        return _isdbt_swig.subset_of_carriers_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(subset_of_carriers_sptr self, int priority) -> int"""
        return _isdbt_swig.subset_of_carriers_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(subset_of_carriers_sptr self) -> std::string"""
        return _isdbt_swig.subset_of_carriers_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(subset_of_carriers_sptr self) -> std::string"""
        return _isdbt_swig.subset_of_carriers_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(subset_of_carriers_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.subset_of_carriers_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(subset_of_carriers_sptr self) -> io_signature_sptr"""
        return _isdbt_swig.subset_of_carriers_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(subset_of_carriers_sptr self) -> long"""
        return _isdbt_swig.subset_of_carriers_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(subset_of_carriers_sptr self) -> basic_block_sptr"""
        return _isdbt_swig.subset_of_carriers_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(subset_of_carriers_sptr self, int ninputs, int noutputs) -> bool"""
        return _isdbt_swig.subset_of_carriers_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(subset_of_carriers_sptr self) -> std::string"""
        return _isdbt_swig.subset_of_carriers_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(subset_of_carriers_sptr self, std::string name)"""
        return _isdbt_swig.subset_of_carriers_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(subset_of_carriers_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _isdbt_swig.subset_of_carriers_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(subset_of_carriers_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.subset_of_carriers_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(subset_of_carriers_sptr self) -> swig_pmt_ptr"""
        return _isdbt_swig.subset_of_carriers_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(subset_of_carriers_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _isdbt_swig.subset_of_carriers_sptr_message_subscribers(self, which_port)

# Register subset_of_carriers_sptr in _isdbt_swig:
_isdbt_swig.subset_of_carriers_sptr_swigregister(subset_of_carriers_sptr)


subset_of_carriers_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
subset_of_carriers = subset_of_carriers.make;



