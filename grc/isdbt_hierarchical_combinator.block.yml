id: isdbt_hierarchical_combinator
label: hierarchical_combinator
category: '[isdbt]'

templates:
  imports: import isdbt
  make: isdbt.hierarchical_combinator(${mode}, ${segments_A}, ${segments_B}, ${segments_C})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: mode  
  label: Transmission Mode
  dtype: raw
  options: [1,2,3] #as per https://github.com/gnuradio/gnuradio/issues/3454 
  option_labels: ['MODE1(2K)', 'MODE2(4K)', 'MODE3(8K)']
  default: 3
- id: segments_A
  label: Layer A Segments
  dtype: int
  default: 13
- id: segments_B
  label: Layer B Segments
  dtype: int
  default: 0
- id: segments_C
  label: Layer C Segments
  dtype: int
  default: 0


#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: in A
  domain: stream 
  dtype: complex
  vlen: ${ (segments_A)*96*(2**(int(mode)-1))} 
  optional: 0
- label: in B
  domain: stream 
  dtype: complex
  vlen: ${ (segments_B)*96*(2**(int(mode)-1))} 
  optional: 1
- label: in C
  domain: stream 
  dtype: complex
  vlen: ${ (segments_C)*96*(2**(int(mode)-1)) }
  optional: 1

outputs:
- label: out
  domain: stream
  dtype: complex
  vlen: ${13*96*(2**(int(mode)-1))} 
  optional: 0

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
