id: isdbt_symbol_demapper
label: symbol_demapper
category: '[isdbt]'

templates:
  imports: import isdbt
  make: isdbt.symbol_demapper(${mode}, ${segments_A}, ${constellation_size_A}, ${segments_B}, ${constellation_size_B}, ${segments_C}, ${constellation_size_C})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
-   id: mode
    label: Transmission Mode
    dtype: int
    default: 3
    options: [1, 2, 3]
    option_labels: ['MODE1(2K)', 'MODE2(4K)', 'MODE3(8K)']
-   id: segments_A
    label: Layer A Segments
    dtype: int
- id: constellation_size_A
  label: Layer Modulation Scheme
  dtype: enum
  options: ['4', '16', '64']
  option_labels: [QPSK, 16QAM, 64QAM]
  default: '4'
-   id: segments_B
    label: Layer B Segments
    dtype: int
- id: constellation_size_B
  label: Layer Modulation Scheme
  dtype: enum
  options: ['4', '16', '64']
  option_labels: [QPSK, 16QAM, 64QAM]
  default: '4'
-   id: segments_C
    label: Layer C Segments
    dtype: int
- id: constellation_size_C
  label: Layer Modulation Scheme
  dtype: enum
  options: ['4', '16', '64']
  option_labels: [QPSK, 16QAM, 64QAM]
  default: '4'

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)

inputs:
- label: out
  domain: stream
  dtype: complex
  vlen: ${13*96*(2**(mode-1))} 
  optional: 0

outputs:
- label: out A
  domain: stream 
  dtype: byte
  vlen: ${ (segments_A)*96*(2**(mode-1))} 
  optional: 0
- label: out B
  domain: stream 
  dtype: byte
  vlen: ${ (segments_B)*96*(2**(mode-1))} 
  optional: 1
- label: out C
  domain: stream 
  dtype: byte
  vlen: ${ (segments_C)*96*(2**(mode-1)) }
  optional: 1



#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
